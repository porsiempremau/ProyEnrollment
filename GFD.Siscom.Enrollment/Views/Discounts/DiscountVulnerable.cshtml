@using GFD.Siscom.Enrollment.Utilities;
@using GFD.Siscom.Enrollment.Utilities.Auth

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <div class="page-title-icon">
                <i class="fas fa-percent">
                </i>
            </div>
            <h1 class="style-main-title">
                @ViewData["Title"]
            </h1>
        </div>
    </div>
</div>

<form id="FormData" onsubmit="GetDataFromAccount(event)">
    <div class="row">
        @*<div class="col-md-3">
                <label>Nombre:</label>
                <input type="text" id="name" name="name" class="form-control" onblur="LimpiarCampos('name')" />
            </div>*@
        <div class="col-md-2">
            <label>Cuenta:</label>
            <input type="text" id="account" name="account" class="form-control" required />
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn btn-GFD margin-top-btns">
                Buscar
            </button>
        </div>
        <div class="col-md-8"></div>
    </div>
</form>
<br />
<div class="main-card mb-3 card">
    <div class="card-body">
        <div class="row">
            <div class="col-md-4">
                <div class="main-card mb-3 card">
                    <div class="title-head">
                        <p>Datos del Descuento</p>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12">
                                <label>Nombre del Descuento:</label>
                                <select id="nameDiscount" name="nameDiscount" class="form-control form-control-sm"></select>
                            </div>
                            @*<div class="col-md-12" style=" margin-top: 37px; margin-bottom: 17px;">
                                <label>Evidencia:</label>
                                <input type="file" id="file" name="file" />
                            </div>*@
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <div class="main-card mb-3 card">
                    <div class="title-head">
                        <p>Registro de descuentos aplicados</p>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-12">
                                <table id="Table" style="width: 100%;" class="table table-hover table-striped table-bordered">
                                    <thead class="style-theads">
                                        <tr>
                                            <th>Contribuyente</th>
                                            <th>Dirección</th>
                                            <th>RFC</th>
                                            <th>Status Descuento</th>
                                            <th>Tipo Descuento</th>
                                        </tr>
                                    </thead>
                                    <tbody id="tbody">
                                        <tr>
                                            <td colspan="5" style="font-size: 20px; text-align: center">Sin Datos</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="d-block text-center card-footer">
        <div class="row">
            <div class="col-md-12">
                <button type="button" id="btnAddDebt" class="btn btn-success float-right" onclick="AddDiscount()" disabled>Agregar Descuento</button>
            </div>
        </div>
    </div>
</div>
<button style="display:none;" id="btnGetPredios" data-toggle="modal" data-target="#modalListaPredios"></button>
<button style="display:none;" id="btnAdeudoCoutaMinima" data-toggle="modal" data-target="#modalAdeudoCoutaMinima"></button>

@section Scripts{
    <partial name="~/Views/Discounts/_ModalListaPredios.cshtml" />
    <partial name="~/Views/Discounts/_ModalAdeudosCoutaMinima.cshtml" />
    <script>
    var __ListSystemsParameters = [],
        __User = [],
        __AgreementId = 0,
        __accountSearched = false,
        //__desabledButton = true,
        __btnAddDebt = document.getElementById("btnAddDebt");

    window.onload = function myfunction() {
        Block();
        GetSystemsParameters().then(response => {
            __ListSystemsParameters = response;
            //console.log("__ListSystemsParameters: ", __ListSystemsParameters);
            RenderSelect("nameDiscount", "Discounts", "", UnBlock);
        });
    }
    function GetDataFromAccount(event) {
        event.preventDefault()
        Block();
        $("#tbody").html("");

        var account = document.getElementById("account").value,
            valorCatastralSysP = GetOneSystemParameter(9, __ListSystemsParameters);
        axios.get("/Agreement/Get/List?account=" + account).then(response => {
            var data = response.data,
                taxableBaseClient = data[0].taxableBase,
                client = data[0],
                status = data[0].status,
                nameClient = data[0].nombre;
            __User = response.data;
            __AgreementId = data[0].agreementId;

            console.log("Data Client: ", data);
            if (data.length > 0) {
                data.forEach(x => {
                    $("#tbody").append(`
                        <tr>
                            <td>${x.nombre}</td>
                            <td>${x.address}</td>
                            <td>${x.rfc}</td>
                            <td style="text-align: center;">
                                ${x.isActiveDiscount ? "<i class='fas fa-check-circle' style='color:green; font-size: 24px;' title='Activo'></i>" : "<i class='fas fa-times-circle' title='Inactivo' style='color:red; font-size: 24px;'></i>"}
                            </td>
                            <td>${x.nameDiscount == "" ? "NINGUNO" : x.nameDiscount}</td>
                        </tr>
                    `);
                });
            }

            if (status == 'INACTIVO' || status == 'inactivo' || status == 'Inactivo') {
                UnBlock();
                Swal.fire({
                    type: 'warning',
                    title: 'Esta cuenta está inactiva',
                    text: 'Si quiere agregar convenios, la cuenta necesita estar Activa',
                    showConfirmButton: true,
                }).then(response => {
                    __accountSearched = false;
                    __btnAddDebt.disabled = true;
                });
            }
            else {
                __accountSearched = true;
                __btnAddDebt.disabled = false;
            }

            if (__accountSearched) {
                if (valorCatastralSysP > 0) {
                    ComparaValorCatastral(taxableBaseClient, valorCatastralSysP, nameClient);
                } else {
                    ComprobarSiTieneDescuento();
                }
            }
            
            UnBlock();
        }).catch(error => {
            UnBlock();
            Swal.fire({
                type: 'info',
                title: 'Cuenta no localizada',
                //text: 'Si quiere agregar convenios, la cuenta necesita estar Activa',
                showConfirmButton: true,
            });
        });
    }

    function ComparaValorCatastral(valorCuenta, valorSystemParameter, nombreContribuyente){
        var ValorCatastralString = new Number(valorCuenta).toLocaleString("es-MX");
        if (valorCuenta > valorSystemParameter) {
            Swal.fire({
                type: 'warning',
                title: 'Advertencia',
                text: "Esta cuenta tiene un Valor Catastral de: " + ValorCatastralString + ". De acuerdo a la ley, no puede aplicar este tipo de descuento",
                showConfirmButton: true,
            }).then(response => {
                __btnAddDebt.disabled = true;
                BuscarPredios(nombreContribuyente.trim());
            });
        } else {
            BuscarPredios(nombreContribuyente.trim());
        }
    }

    function BuscarPredios(nombre) {
        Block();
        axios.post('/Agreement/SearchByNameClient', {nombre}).then(response => {
            var data = response.data;
            UnBlock();
            if (data.length > 1) {
                Swal.fire({
                    type: 'warning',
                    title: 'Advertencia',
                    text: name + ' aparece en más de un predio. De acuerdo a la ley, no puede aplicar este tipo de descuento',
                    showConfirmButton: true,
                }).then(response => {
                    __btnAddDebt.disabled = true;
                    $("#btnGetPredios").click();
                    $("#tbodyListPredios").html("");
                    data.forEach(x => {
                        $("#tbodyListPredios").append(`
                            <tr>
                                <td>${x.agreement.account}</td>
                                <td>${x.rfc}</td>
                                <td>${x.agreement.token}</td>
                            </tr>
                        `);
                    });
                });
            } else {
                __btnAddDebt.disabled = false;
                this.GetDebts(this.idAgreement);
            }
        }).catch(error => {
            UnBlock();
        });
    }

    function GetDebts(idAgrement) {
        //Deuda: ED001, ED004, ED007, ED011
        var DebtsCurrentlyYear = [],
            DebtsNextYear = [],
            ArrayDebtsCuotaMinima = [];

        if ('@Plataform.IsAyuntamiento' == 'False') {
            var AnioActual = GetOneSystemParameter(38, __ListSystemsParameters),
                AnioSiguiente = GetOneSystemParameter(39, __ListSystemsParameters),
                CoutaMinimaAnioActual = GetOneSystemParameter(40, __ListSystemsParameters),
                CuotaMinimaAnioSiguiente = GetOneSystemParameter(41, __ListSystemsParameters);
        } else {
            var AnioActual = GetOneSystemParameter(66, __ListSystemsParameters),
                AnioSiguiente = GetOneSystemParameter(64, __ListSystemsParameters),
                CoutaMinimaAnioActual = GetOneSystemParameter(7, __ListSystemsParameters),
                CuotaMinimaAnioSiguiente = GetOneSystemParameter(62, __ListSystemsParameters);
        }

        axios.get('/Debt/OneDebt/' + __AgreementId).then(result => {
            var data = result.data;
            data.forEach(x => {
                if (x.descriptionType == "Predial" || x.descriptionType == "PREDIAL" ||
                    x.descriptionType == "Limpia" || x.descriptionType == "LIMPIA") {
                    if (parseInt(x.year) == AnioActual) {
                        if (parseFloat(x.amount) <= CoutaMinimaAnioActual) {
                            DebtsCurrentlyYear.push(x);
                        }
                    }

                    if (parseInt(x.year) == AnioSiguiente) {
                        if (parseFloat(x.amount) <= CuotaMinimaAnioSiguiente) {
                            DebtsNextYear.push(x);
                        }
                    }
                }
            });

            if (DebtsCurrentlyYear.length > 0 || DebtsNextYear.length > 0) {
                ArrayDebtsCuotaMinima.push({ year: AnioActual, Debt: DebtsCurrentlyYear });
                ArrayDebtsCuotaMinima.push({ year: AnioSiguiente, Debt: DebtsNextYear });
            }

            if (ArrayDebtsCuotaMinima.length > 0) {
                Swal.fire({
                    type: 'warning',
                    title: 'Advertencia',
                    text: "Esta cuenta tiene adeudo de Predial con cuota minima. " +
                        "De acuerdo a la ley, no puede aplicar este tipo de descuento",
                    showConfirmButton: true,
                }).then(result => {
                    __btnAddDebt.disabled = true;
                    let i = 0;
                    $("#btnAdeudoCoutaMinima").click();
                    console.log("ArrayDebtsCuotaMinima: ", ArrayDebtsCuotaMinima);
                    ArrayDebtsCuotaMinima.forEach(x => {
                        $("#ContetTableDebts").append(`
                            <p class="year-style">${x.year}</p>
                            <table style="width: 100%;" id="TableListDebts${i}" class="table table-hover table-striped table-bordered">
                                <thead class="style-theads">
                                    <tr>
                                        <th>Tipo Servicio</th>
                                        <th>Tipo Toma</th>
                                        <th>Periodo</th>
                                        <th>Monto</th>
                                    </tr>
                                </thead>
                                <tbody id="tbodyListDebts${i}">
                                </tbody>
                            </table>
                        `);
                        x.Debt.forEach(y => {
                            var DateFormat = getFormateDate(y.fromDate);
                            $("#tbodyListDebts" + i).append(`
                                <tr>
                                    <td>${y.typeService}</td>
                                    <td>${y.typeIntake}</td>
                                    <td>${DateFormat}</td>
                                    <td>${y.amount == 0 ? "0.00" : y.amount}</td>
                                </tr>
                            `);
                        });
                        i++;
                    });
                });
            } else {
                ComprobarSiTieneDescuento();
            }
        }, error => {
            ArrayDebtsCuotaMinima = null;
        });
    }

    function ComprobarSiTieneDescuento() {
        __User.forEach(x => {
            if (x.isActiveDiscount) {
                Swal.fire({
                    type: 'warning',
                    title: 'Esta cuenta ya tiene descuento',
                    text: 'Si quiere activar uno nuevo, el descuento de ' + x.nameDiscount + " será desactivado",
                    showConfirmButton: true,
                });
            }
        });
        UnBlock();
    }

    function AddDiscount() {
        Block();
        var discountId = document.getElementById("nameDiscount").value;
        var data = {
            agreementId: __AgreementId,
            discountId: discountId,
            userId: '@Auth.Login.User',
            isActive: true,
            observation: ""
        }
        axios.post('/Discounts/AddDiscountToAgreement', data).then(response => {
            console.log(response.data);
            UnBlock();
            Swal.fire({
                type: 'success',
                title: 'Correcto',
                text: response.data,
                showConfirmButton: true,
            });
        }).catch(error => {
            UnBlock();
            console.error("Error: ", error.response);
            Swal.fire({
                type: 'info',
                title: 'Disculpa',
                text: error.response.data,
                showConfirmButton: true,
            });
        });
    }
    </script>
}
