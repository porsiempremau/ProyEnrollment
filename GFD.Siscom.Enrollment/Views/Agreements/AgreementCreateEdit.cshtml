@model object
@using GFD.Siscom.Enrollment.Utilities;
@using GFD.Siscom.Enrollment.Utilities.Auth;
@using Newtonsoft.Json;
@{
    if (Model != null)
    {
        ViewData["Title"] = "Modificar Contrato";
    }
    else
    {
        ViewData["Title"] = "Generar Contrato";
    }

    dynamic data = JsonConvert.DeserializeObject<object>(JsonConvert.SerializeObject(Model));
    var idAgreement = data["id"];
}

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <div class="page-title-icon">
                <i class="fas fa-paste">
                </i>
            </div>
            <h1 class="style-main-title">
                @ViewData["Title"]
            </h1>
        </div>
    </div>
</div>
<br />
<div class="main-card mb-3 card">
    <div class="card-header">
        <ul class="nav nav-justified">
            <li class="nav-item"><a id="TabAgreement" data-toggle="tab" href="#agreementTab" class="active nav-link">Contrato</a></li>
            <li class="nav-item"><a id="TabClient" data-toggle="tab" href="#clientTab" class="nav-link" onclick="ValidateSectionAgreement()">Cliente</a></li>
            <li class="nav-item"><a id="TabAddress" data-toggle="tab" href="#addressTab" class="nav-link" onclick="ValidateSectionClients()">Dirección</a></li>
            @if (idAgreement != 0)
            {
                <li class="nav-item"><a id="TabRecord" data-toggle="tab" href="#recordTab" class="nav-link" onclick="ValidateSectionRecord('Pagos')">Historial</a></li>
            }
        </ul>
    </div>
    <div class="card-body">
        <form id="FormData" onsubmit="SaveData(event)">
            <div class="tab-content">
                <div class="tab-pane active" id="agreementTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabAgreement.cshtml" />
                </div>
                <div class="tab-pane" id="clientTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabClient.cshtml" />
                </div>
                <div class="tab-pane" id="addressTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabAddress.cshtml" />
                </div>
                <div class="tab-pane" id="recordTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabRecord.cshtml" />
                </div>
            </div>
            <div class="d-block text-center card-footer">
                <div class="row">
                    <div class="col-md-12">
                        @if (idAgreement == 0)
                        {
                            <button type="submit" id="btnSaveData" class="btn btn-success float-right" disabled>Guardar Datos</button>
                            <button type="button" id="btnAddDebt" style="display: none;" data-toggle="modal" data-target="#modalAddDebtAgreement"></button>
                        }

                        @*<button type="button" class="btn btn-success float-right" onclick="AddDebtAgua()">Probar Adeudo</button>*@
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>



@section Scripts{
    <partial name="~/Views/Partials/Modals/_ModalSearchTaxUser.cshtml" />
    <partial name="~/Views/Agreements/_ModalAddDebtAgreement.cshtml" />
    <script>
        
        var isAyuntamiento = '@Plataform.IsAyuntamiento' == 'True' ? true : false,
            __date = new Date(),
            __AccountAyuntamiento = "",
            __YearBefore = false,
            __DataGeneral,
            form,
            __TypeAgreement = "",
            __userId = '@Auth.Login.User',
            __diameters = [],
            __services = [],
            __typeAddresses = [],
            __typeAgreemnets = [],
            __typeClassifications = [],
            __typeClients = [],
            __typeCommertialBusiness = [],
            __typeConsume = [],
            __typeContacts = [],
            __typeDebts = [],
            __typeDescounts = [],
            __typeFile = [],
            __typeIntake = [],
            __typePeriod = [],
            __typeRegime = [],
            __typeService = [],
            __typeStateService = [],
            __typeUse = [],
            __listAgreementDetail = [],
            __listClients = [],
            __listaNumbers = [],
            __listaAddress = [],
            idContacts = 1,
            idClients = 1,
            idAddresses = 1,
            __AgreementAccountFound = "",
            __AgreementIdFound = 0;

        if ('@Plataform.IsAyuntamiento' == 'False')
        {
            __TypeAgreement = "AGR01";
        } else {
            __TypeAgreement = "CAT01"
        }

        window.onload = function () {
            Block();

            if (@idAgreement == 0) {
                if ('@Plataform.IsAyuntamiento' == 'True') {
                    getData("UR");
                } else {
                    getData("HA");
                }
            }

            form = document.getElementById("FormData");
            form.route.addEventListener("keypress", onlyNumbers, false);
            form.phone.addEventListener("keypress", onlyNumbers, false);
            form.ine.addEventListener("keypress", onlyNumbers, false);
            form.zip.addEventListener("keypress", onlyNumbers, false);

            if ('@Plataform.IsAyuntamiento' == 'True')
            {
                form.folio.addEventListener("keypress", onlyNumbers, false);
                form.register.addEventListener("keypress", onlyNumbers, false);
                form.taxableBase.addEventListener("keypress", onlyNumbers, false);
                form.ground.addEventListener("keypress", onlyNumbers, false);
                form.build.addEventListener("keypress", onlyNumbers, false);
                var dateCurrently = new Date();
                $("#agreementDetailDate").val(getFormateDate(dateCurrently));
            }

            $("#ID").val('@idAgreement');

            if (@idAgreement != 0) {
                setDataAgreement(@idAgreement);
            }
        }

        function setDataAgreement(id) {
            var servicesSelect = [];

            if ('@Plataform.IsAyuntamiento' == 'True') {
                document.getElementById("typeConsume").disabled = true;
            }
            document.getElementById("account").disabled = true;

            axios.get("/Agreement/GetSelected/" + id).then(response => {
                var data = response.data;
                console.log("Agreement: ", data);
                var AgreementDetails = data.agreementDetails,
                    AgreementServices = data.agreementServices,
                    Clients = data.clients,
                    Addresses = data.addresses;

                getData(data.typeIntake.acronym).then(response => {
                    $("#typeConsume").val(data.typeConsumeId);
                    $("#account").val(data.account);
                    $("#typeIntake").val(data.typeIntakeId);
                    $("#typeRegime").val(data.typeRegimeId);
                    $("#typeUse").val(data.typeUseId);
                    $("#typeCommertialBusiness").val(data.typeCommertialBusinessId);
                    $("#typeClassification").val(data.typeClassificationId);
                    $("#typeService").val(data.typeServiceId);
                    $("#typePeriod").val(data.typePeriodId);
                    $("#diameter").val(data.diameterId);
                    $("#route").val(data.route);
                    //Agreement Details
                    if (AgreementDetails.length > 0) {
                        AgreementDetails.forEach(x => {
                            var agreementDetailDate = getFormateDate(x.agreementDetailDate);
                            var lastUpdate = getFormateDate(x.lastUpdate);
                            $("#idAgreementDetail").val(x.id);
                            $("#folio").val(x.folio);
                            $("#register").val(x.register);
                            $("#taxableBase").val(x.taxableBase);
                            $("#ground").val(x.ground);
                            $("#build").val(x.built);
                            $("#agreementDetailDate").val(agreementDetailDate);
                            $("#lastUpdate").val(lastUpdate);
                            $("#manifest").val(x.manifest ? "true" : "false");
                            $("#catastralKey").val(x.catastralKey);
                        });
                    }

                    AgreementServices.forEach(x => {
                        servicesSelect.push(x.idService);
                    });
                    $("#services").val(servicesSelect);

                    Clients.forEach(x => {
                        var client = new ClientVM(x);
                        __listClients.push(client);
                        client.contacts.forEach(y => {
                            var contact = new ContactVM(y);
                            contact.clientId = y.clienteId;
                            __listaNumbers.push(contact);
                        });
                    });
                    fillTableClients("tbodyClients");
                    fillTableContact("tbodyContacts");

                    console.log("__listClients: ", __listClients);

                    Addresses.forEach(x => {
                        var address = new AddressVM(x);
                        address.suburbName = x.suburbs.name;
                        address.townId = x.suburbs.towns.id;
                        address.townName = x.suburbs.towns.name;
                        address.stateId = x.suburbs.towns.states.id;
                        address.stateName = x.suburbs.towns.states.name;
                        address.agreementId = x.agreementsId;
                        __listaAddress.push(address);
                    });
                    fillTableAddress("tbodyAddresses");
                }).catch(error => {
                    console.log(error);
                });
            }).catch(error => { });
        }

        const getData = (acronym) => {
            return new Promise((resolve, reject) => {
                axios.get('/Agreement/GetData').then(response => {
                    var data = response.data;
                    console.log("data: ", data);
                    __diameters = data.diameter;
                    __services = data.services;
                    __typeAddresses = data.typeAddresses;
                    __typeAgreemnets = data.typeAgreemnets;
                    __typeClassifications = data.typeClassifications;
                    __typeClients = data.typeClients;
                    __typeCommertialBusiness = data.typeCommertialBusiness;
                    __typeConsume = data.typeConsume;
                    __typeContacts = data.typeContacts;
                    __typeDebts = data.typeDebts;
                    __typeDescounts = data.typeDescounts;
                    __typeFile = data.typeFile;
                    __typeIntake = data.typeIntake;
                    __typePeriod = data.typePeriod;
                    __typeRegime = data.typeRegime;
                    __typeService = data.typeService;
                    __typeStateService = data.typeStateService;
                    __typeUse = data.typeUse;

                    RenderSelectOption(acronym, "typeConsume", __typeConsume, isAyuntamiento);
                    RenderSelectOption(acronym, "typeIntake", __typeIntake, isAyuntamiento);
                    RenderSelectOption(acronym, "typeRegime", __typeRegime, isAyuntamiento);
                    RenderSelectOption(acronym, "typeUse", __typeUse, isAyuntamiento);
                    RenderSelectOption(acronym, "typeCommertialBusiness", __typeCommertialBusiness, isAyuntamiento);
                    RenderSelectOption(acronym, "typeClassification", __typeClassifications, isAyuntamiento);
                    RenderSelectOption(acronym, "typeService", __typeService, isAyuntamiento);
                    if (!isAyuntamiento)
                    {
                        RenderSelectOption(acronym, "diameter", __diameters, isAyuntamiento);
                    }
                    RenderSelectOption(acronym, "services", __services, isAyuntamiento);
                    RenderSelectOption(acronym, "typePeriod", __typePeriod, isAyuntamiento, UnBlock);

                    resolve(true);

                }).catch(error => {
                    reject(false);
                });
            });
        }


        function SaveData(event) {
            Block();
            event.preventDefault();

            var servicesList = [],
                clientsList = [],
                contactsList = [],
                addressesList = [],
                servicesSelect = document.getElementById("services"),
                checkIsMoral = document.getElementById("isMoral").checked;

            if (checkIsMoral) {
                $("#lastName").val("");
                $("#secondLastName").val("");
            }

            var x = servicesSelect.selectedOptions;
            for (var i = 0; i < x.length; i++) {
                servicesList.push(parseInt(x[i].value));
            }

            __listaNumbers.forEach(x => {
                var contact = new ContactVM(x);
                contactsList.push(contact);
            });

            __listClients.forEach(x => {
                var client = new ClientVM(x);
                client.contacts = contactsList;
                clientsList.push(client);
            });

            __listaAddress.forEach(x => {
                var address = new AddressVM(x);
                addressesList.push(address);
            });

            var agreement = new AgreementVM({ });
            agreement.id = GetValue("ID", true);
            agreement.account = GetValue("account", false);
            agreement.route = GetValue("route", false);
            agreement.derivatives = 0;
            agreement.typeServiceId = GetValue("typeService", true);
            agreement.typeUseId = GetValue("typeUse", true);
            agreement.typeConsumeId = GetValue("typeConsume", true);
            agreement.typeRegimeId = GetValue("typeRegime", true);
            agreement.typePeriodId = GetValue("typePeriod", true);
            agreement.typeCommertialBusinessId = GetValue("typeCommertialBusiness", true);
            agreement.typeStateServiceId = 1;
            agreement.typeIntakeId = GetValue("typeIntake", true);
            agreement.typeClasificationId = GetValue("typeClassification", true);
            agreement.diameterId = '@Plataform.IsAyuntamiento' == 'True' ? 1 : GetValue("diameter", true);
            agreement.typeAgreement = __TypeAgreement;
            agreement.agreementPrincipalId = 0;
            agreement.userId = __userId;
            agreement.observations = GetValue("observations", false) != "" ? GetValue("observations", false) : "N/A";
            agreement.servicesId = servicesList;
            agreement.adresses = addressesList;
            agreement.clients = clientsList;
            agreement.agreementDetails = [];

            if ('@Plataform.IsAyuntamiento' == 'True' && agreement.typeIntakeId == 2 && @idAgreement == 0) { //Si es Rustico, a la cuenta se le agrega una R al final
                agreement.account = agreement.account + "R";
            }

            __AccountAyuntamiento = agreement.account;

            axios.post('/Agreement/CreateEdit/' + agreement.id, agreement).then(response => {
                UnBlock();
                //console.log("Termina de agregar Agreement: ", response.data);
                if (@idAgreement != 0) {
                    Swal.fire({
                        title: "Bien",
                        text: response.data,
                        type: 'success',
                        showConfirmButton: true,
                    }).then(response => {
                        AddEditAgreementDetail(@idAgreement).then(response => {
                            window.location.href = "/Agreement/EditCreateView?idAgreement=" + @idAgreement;
                        });
                    });
                } else {
                    axios.get('/FoundAgreement/' + response.data.id).then(response => {
                        //console.log("Busca Agreement: ", response.data);
                        __AgreementIdFound = response.data.id;
                        __AgreementAccountFound = response.data.account;
                        Swal.fire({
                            title: "Bien",
                            text: response.data.success,
                            type: 'success',
                            showConfirmButton: true,
                        }).then(response => {
                            if (isAyuntamiento) {
                                AddEditAgreementDetail(__AgreementIdFound).then(response => {
                                    AddDebtAyuntamiento(__AgreementIdFound);
                                });
                            } else {
                                $("#btnAddDebt").click();
                            }
                        });
                    }).catch(error => { });
                }
            }).catch(error => {
                UnBlock();
                console.error("Error: ", error.response.data.error)
                Swal.fire({
                    title: "Disculpa",
                    text: error.response.data.error,
                    type: 'info',
                    showConfirmButton: true,
                });
            });
        }

        function ValidateSectionAgreement() {
            var ListServices = document.getElementById("services").selectedOptions,
                account = document.getElementById("account");

            var tabAgreement = document.getElementById("TabAgreement"),
                tabContentAgreement = document.getElementById("agreementTab");

            var tabClient = document.getElementById("TabClient"),
                tabContentClient = document.getElementById("clientTab");

            var mesagge = "Debes seleccionar algún servicio";
            if ('@Plataform.IsAyuntamiento' == 'True') {
                mesagge = "Debes seleccionar algún impuesto";
            }

            let promise = new Promise((resolve, reject) => {
                if ('@Plataform.IsAyuntamiento' == 'True' && @idAgreement == 0) {
                    if (account.value == "") {
                        Swal.fire({
                            title: "Disculpa",
                            text: 'Debes agregar el número de cuenta',
                            type: 'info',
                            showConfirmButton: true,
                        }).then(response => {
                            tabClient.classList.remove("active");
                            tabContentClient.classList.remove("active");
                            tabAgreement.classList.add("active");
                            tabContentAgreement.classList.add("active");
                        });
                    }
                }
                resolve(true);
            });

            promise.then(response => {
                if (ListServices.length == 0) {
                    Swal.fire({
                        title: "Disculpa",
                        text: mesagge,
                        type: 'info',
                        showConfirmButton: true,
                    }).then(response => {
                        tabClient.classList.remove("active");
                        tabContentClient.classList.remove("active");
                        tabAgreement.classList.add("active");
                        tabContentAgreement.classList.add("active");
                    });
                }
            });

            startSectionClient();
        }

        function ValidateSectionClients() {

            if (__listClients.length == 0) {
                var tabClient = document.getElementById("TabClient"),
                    tabContentClient = document.getElementById("clientTab");

                var tabAddress = document.getElementById("TabAddress"),
                    tabContentAddress = document.getElementById("addressTab");

                Swal.fire({
                    title: "Disculpa",
                    text: 'Debes agregar un cliente',
                    type: 'info',
                    showConfirmButton: true,
                }).then(response => {
                    tabClient.classList.add("active");
                    tabContentClient.classList.add("active");

                    tabAddress.classList.remove("active");
                    tabContentAddress.classList.remove("active");
                });
            } else {
                StartTabAddress();
            }
        }

        function ValidateSectionRecord(tipo) {
            Block();
            debugger
            ClearDataTable("Table");
            axios.get("/Agreement/record?idAgreement=" + @idAgreement + "&tipo=" + tipo + "")
                .then(response => {
                    
                    var data = response.data;

                    if (tipo == "Pagos") {

                        var cuerpoTabla = "";
                        data.forEach(x => {
                            var PaymentDate = getFormateDate(x.paymentDate);
                            cuerpoTabla += `<tr>
                                <td>${PaymentDate}</td>
                                <td>${x.branchOffice}</td>
                                <td>${x.payMethod.name}</td>
                                <td>${FormatoPeso.format(x.total)}</td >
                                <td>${(x.status == 'EP001' ? "Cobrado" : "Cancelado")}</td>
                            </tr>`;
                        });

                        document.getElementById("tablaRecord").innerHTML = `<table style="width: 100%;" id="Table" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th width="15%">Fecha</th>
                                    <th width="15%">Sucursal</th>
                                    <th width="15%">Forma Pago</th>
                                    <th width="15%">Monto</th>
                                    <th width="15%">Estado</th>
                                </tr>
                            </thead>
                            <tbody id="tablaRecordBody">
                                ${cuerpoTabla}
                            </tbody>
                        </table>`;
                        UnBlock();
                    }
                    else if (tipo == "Recibos") {
                        var cuerpoTabla = "";
                        data.forEach(x => {
                            var FromDate = getFormateDate(x.fromDate);
                            var UntilDate = getFormateDate(x.untilDate);
                            var DebitDate = getFormateDate(x.debitDate);
                            cuerpoTabla += `<tr>
                                <td>${FromDate} - ${UntilDate}</td>
                                <td>${x.typeIntake}</td>
                                <td>${x.typeService}</td>
                                <td>${FormatoPeso.format(x.amount - x.onAccount)}</td>
                                <td>${(x.type == "TIP01" ? "Servicio" : "Producto")}</td>
                                <td></td>
                                <td>${DebitDate}</td>
                                <td>${x.descriptionStatus}</td>
                            </tr>`;
                        });

                        document.getElementById("tablaRecord").innerHTML = `<table style="width: 100%;" id="Table" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th width="20%">Periodo</th>
                                    <th width="10%">Tipo cuenta</th>
                                    <th width="10%">Servicio</th>
                                    <th width="10%">Monto</th>
                                    <th width="10%">Tipo</th>
                                    <th width="10%">Total a pagar</th>
                                    <th width="10%">Emisión</th>
                                    <th width="20%">Descrición del estado</th>
                                </tr>
                            </thead>
                            <tbody id="tablaRecordBody">
                                ${cuerpoTabla}
                            </tbody>
                        </table>`;
                        UnBlock();
                    }
                    else if (tipo == "Notificaciones") {
                        var cuerpoTabla = "";
                        data.forEach(x => {
                            var FromDate = getFormateDate(x.fromDate);
                            var UntilDate = getFormateDate(x.untilDate);
                            cuerpoTabla += `<tr>
                                <td>${x.folio}</td>
                                <td>${x.notificationDate}</td>
                                <td>${x.status}</td>
                                <td>${FromDate} - ${UntilDate}</td>
                                <td>${FormatoPeso.format(x.total)}</td>
                            </tr>`;
                        });

                        document.getElementById("tablaRecord").innerHTML = `<table style="width: 100%;" id="Table" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th width="10%">Folio</th>
                                    <th width="10%">Fecha Notifi</th>
                                    <th width="10%">Status</th>
                                    <th width="10%">Periodo</th>
                                    <th width="10%">Monto Notifi</th>
                                </tr>
                            </thead>
                            <tbody id="tablaRecordBody">
                                ${cuerpoTabla}
                            </tbody>
                        </table>`;
                        UnBlock();
                    }
                    else {      //Anticipos
                        var cuerpoTabla = "";
                        data.forEach(x => {
                            var prepaidDate = getFormateDate(x.prepaidDate);
                            cuerpoTabla += `<tr>
                                <td>${prepaidDate}</td>
                                <td>${FormatoPeso.format(x.amount)}</td>
                                <td>${x.accredited}</td>
                                <td>${x.status}</td>
                            </tr>`;
                        });

                        document.getElementById("tablaRecord").innerHTML = `<table style="width: 100%;" id="Table" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th width="10%">Fehca Anticipo</th>
                                    <th width="10%">Monto</th>
                                    <th width="10%">Saldo disponible</th>
                                    <th width="10%">Status</th>
                                </tr>
                            </thead>
                            <tbody id="tablaRecordBody">
                                ${cuerpoTabla}
                            </tbody>
                        </table>`;
                        UnBlock();
                    }

                    if (!isAyuntamiento)
                    {

                    }

                    if (data.length > 10) {
                        loadDataTable("Table");
                    }
                })
                .catch(error => {

                });

        }

        //GENERAR LA DEUDA AL CREAR EL CONTRATO
        function AddDebtAgua() {
            Block();
            let positionYearCurrently = 0;
            const url = "/Debt/AddDebtToAgreement?AgreementId=";
            var AgreementId = __AgreementIdFound
                accountNumber =__AgreementAccountFound
                year = GetValue("year", true); //7
                month = GetValue("month", true); //0

            YEAR.forEach(y => {
                if (__date.getFullYear() == y.year) {
                    positionYearCurrently = y.index;
                }
            })

            for (let i = year; i <= positionYearCurrently; i++) {
                if (i > year && i != positionYearCurrently) {
                    for (let j = 0; j < YEAR[i].months.length; j++) {
                        axios.post(url + AgreementId + "&month=" + YEAR[i].months[j].number + "&year=" + YEAR[i].year).then(response => { });
                        __YearBefore = true;
                    }
                } else if (i == positionYearCurrently) {
                    if (__YearBefore) {
                        for (let monthB = 0; monthB <= __date.getMonth(); monthB++) {
                            axios.post(url + AgreementId + "&month=" + YEAR[i].months[monthB].number + "&year=" + YEAR[i].year).then(response => { });
                            if (i == positionYearCurrently && monthB == __date.getMonth()) {
                                UnBlock();
                                Swal.fire({
                                    type: 'success',
                                    title: 'Adeudo agregado',
                                    text: 'Para la cuenta: ' + accountNumber,
                                    showConfirmButton: true,
                                }).then(response => {
                                    window.location.href = "/Agreement/List";
                                });
                            }
                        }
                    } else if (month < __date.getMonth()) {
                        for (let monthB = month; monthB <= __date.getMonth(); monthB++) {
                            axios.post(url + AgreementId + "&month=" + YEAR[i].months[monthB].number + "&year=" + YEAR[i].year).then(response => { });
                            if (i == positionYearCurrently && monthB == __date.getMonth()) {
                                UnBlock();
                                Swal.fire({
                                    type: 'success',
                                    title: 'Adeudo agregado',
                                    text: 'Para la cuenta: ' + accountNumber,
                                    showConfirmButton: true,
                                }).then(response => {
                                    window.location.href = "/Agreement/List";
                                });
                            }
                        }
                    } else {
                        for (var monthBC = 0; monthBC <= __date.getMonth(); monthBC++) {
                            axios.post(url + AgreementId + "&month=" + YEAR[i].months[monthBC].number + "&year=" + YEAR[i].year).then(response => { });
                            if (i == positionYearCurrently && monthBC == __date.getMonth()) {
                                UnBlock();
                                Swal.fire({
                                    type: 'success',
                                    title: 'Adeudo agregado',
                                    text: 'Para la cuenta: ' + accountNumber,
                                    showConfirmButton: true,
                                }).then(response => {
                                    window.location.href = "/Agreement/List";
                                });
                            }
                        }
                    }
                } else {
                    for (let k = month; k < YEAR[i].months.length; k++) {
                        axios.post(url + AgreementId + "&month=" + YEAR[i].months[k].number + "&year=" + YEAR[i].year).then(response => { });
                    }
                }
            }
        }

        function AddDebtAyuntamiento(AgreementId) {
            Swal.fire({
                title: 'Se agregará un Adeudo',
                text: "¿Está deacuerdo con esto?",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Aceptar'
            }).then((result) => {
                Block();
                if (result.value) {
                    axios.post("/Debt/AddDebtToAgreement?AgreementId=" + AgreementId).then(response => {
                        UnBlock();
                        Swal.fire({
                            type: 'success',
                            title: '¡Correcto!',
                            text: response.data + ' para la cuenta: ' + __AccountAyuntamiento,
                            showConfirmButton: true,
                        }).then(response => {
                            window.location.href = "/Agreement/List";
                        });
                    }).catch(error => {
                        console.log("Error", error.response);
                        Swal.fire({
                            type: 'info',
                            title: '¡Discupe!',
                            text: error.response,
                            showConfirmButton: true,
                        });
                    });
                } else {
                    UnBlock();
                    window.location.href = "/Agreement/List";
                }
            })
        }
    </script>
}
