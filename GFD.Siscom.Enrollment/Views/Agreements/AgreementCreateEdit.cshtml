@model object
@using GFD.Siscom.Enrollment.Utilities;
@using GFD.Siscom.Enrollment.Utilities.Auth;
@using Newtonsoft.Json;
@{
    if (Model != null)
    {
        ViewData["Title"] = "Modificar Contrato";
    }
    else
    {
        ViewData["Title"] = "Generar Contrato";
    }

    dynamic data = JsonConvert.DeserializeObject<object>(JsonConvert.SerializeObject(Model));
    var idAgreement = data["id"];
}

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <div class="page-title-icon">
                <i class="pe-7s-medal icon-gradient bg-tempting-azure">
                </i>
            </div>
            <div>
                @ViewData["Title"]
            </div>
        </div>
    </div>
</div>
<br />
<div class="main-card mb-3 card">
    <div class="card-header">
        <ul class="nav nav-justified">
            <li class="nav-item"><a id="TabAgreement" data-toggle="tab" href="#agreementTab" class="active nav-link">Contrato</a></li>
            <li class="nav-item"><a id="TabClient" data-toggle="tab" href="#clientTab" class="nav-link" onclick="ValidateSectionAgreement()">Cliente</a></li>
            <li class="nav-item"><a id="TabAddress" data-toggle="tab" href="#addressTab" class="nav-link" onclick="ValidateSectionClients()">Dirección</a></li>
        </ul>
    </div>
    <div class="card-body">
        <form id="FormData" onsubmit="SaveData(event)">
            <div class="tab-content">
                <div class="tab-pane active" id="agreementTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabAgreement.cshtml" />
                </div>
                <div class="tab-pane" id="clientTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabClient.cshtml" />
                </div>
                <div class="tab-pane" id="addressTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabAddress.cshtml" />
                </div>
            </div>
            <div class="d-block text-center card-footer">
                <div class="row">
                    <div class="col-md-12">
                        <button type="submit" id="btnSaveData" class="btn btn-GFD float-right" disabled>Guardar Datos</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>



@section Scripts{
    <partial name="~/Views/Partials/Modals/_ModalSearchTaxUser.cshtml" />
    <script>
        var form,
            __TypeAgreement = "",
            __userId = '@Auth.Login.User',
            __diameters = [],
            __services = [],
            __typeAddresses = [],
            __typeAgreemnets = [],
            __typeClassifications = [],
            __typeClients = [],
            __typeCommertialBusiness = [],
            __typeConsume = [],
            __typeContacts = [],
            __typeDebts = [],
            __typeDescounts = [],
            __typeFile = [],
            __typeIntake = [],
            __typePeriod = [],
            __typeRegime = [],
            __typeService = [],
            __typeStateService = [],
            __typeUse = [],
            __listAgreementDetail = [],
            __listClients = [],
            __listaNumbers = [],
            __listaAddress = [],
            idContacts = 1,
            idClients = 1,
            idAddresses = 1;

        if ('@Plataform.IsAyuntamiento' == 'False')
        {
            __TypeAgreement = "AGR01";
        } else {
            __TypeAgreement = "CAT01"
        }

        window.onload = function () {
            Block();
            getData();

            form = document.getElementById("FormData");
            form.phone.addEventListener("keypress", onlyNumbers, false);
            form.ine.addEventListener("keypress", onlyNumbers, false);
            form.zip.addEventListener("keypress", onlyNumbers, false);

            if ('@Plataform.IsAyuntamiento' == 'True' && document.getElementById("ID").value != 0)
            {
                form.folio.addEventListener("keypress", onlyNumbers, false);
                form.register.addEventListener("keypress", onlyNumbers, false);
                form.taxableBase.addEventListener("keypress", onlyNumbers, false);
                form.ground.addEventListener("keypress", onlyNumbers, false);
                form.build.addEventListener("keypress", onlyNumbers, false);
            }

            $("#ID").val('@idAgreement');

            if ('@idAgreement' != '0') {
                setDataAgreement('@idAgreement');
            }


        }

        function setDataAgreement(id) {
            axios.get("/Agreement/GetSelected/" + id).then(response => {
                var data = response.data;

                console.log("Agreement: ", data);
                $("#typeConsume").val(data.typeConsumeId);
                $("#account").val(data.account);
                $("#typeIntake").val(data.typeIntakeId);
                $("#typeRegime").val(data.typeRegimeId);
                $("#typeUse").val(data.typeUseId);
                $("#typeCommertialBusiness").val(data.typeCommertialBusinessId);
                $("#typeClassification").val(data.typeClassificationId);
                $("#typeService").val(data.typeServiceId);
                $("#diameter").val(data.diameterId);

                data.clients.forEach(x => {
                    var client = new ClientVM(x);
                    __listClients.push(client);
                });

                fillTableClients("tbodyClients");


            }).catch(error => { });
        }

        function getData() {
            axios.get('/Agreement/GetData').then(response => {
                var data = response.data;
                console.log("data: ", data);
                __diameters = data.diameter;
                __services = data.services;
                __typeAddresses = data.typeAddresses;
                __typeAgreemnets = data.typeAgreemnets;
                __typeClassifications = data.typeClassifications;
                __typeClients = data.typeClients;
                __typeCommertialBusiness = data.typeCommertialBusiness;
                __typeConsume = data.typeConsume;
                __typeContacts = data.typeContacts;
                __typeDebts = data.typeDebts;
                __typeDescounts = data.typeDescounts;
                __typeFile = data.typeFile;
                __typeIntake = data.typeIntake;
                __typePeriod = data.typePeriod;
                __typeRegime = data.typeRegime;
                __typeService = data.typeService;
                __typeStateService = data.typeStateService;
                __typeUse = data.typeUse;

                RenderSelectOption("typeConsume", __typeConsume);
                RenderSelectOption("typeIntake", __typeIntake);
                RenderSelectOption("typeRegime", __typeRegime);
                RenderSelectOption("typeUse", __typeUse);
                RenderSelectOption("typeCommertialBusiness", __typeCommertialBusiness);
                RenderSelectOption("typeClassification", __typeClassifications);
                RenderSelectOption("typeService", __typeService);
                if ('@Plataform.IsAyuntamiento' == 'False')
                {
                    RenderSelectOption("diameter", __diameters);
                }
                RenderSelectOption("services", __services);
                RenderSelectOption("typePeriod", __typePeriod, "", UnBlock);

            }).catch(error => { });
        }

        function SaveData(event) {
            Block();
            event.preventDefault();

            var servicesList = [],
                clientsList = [],
                contactsList = [],
                addressesList = [],
                servicesSelect = document.getElementById("services"),
                checkIsMoral = document.getElementById("isMoral").checked;


            if ('@Plataform.IsAyuntamiento' == 'True') {
                servicesList = [1, 2];
            } else {
                var x = servicesSelect.selectedOptions;
                for (var i = 0; i < x.length; i++) {
                    servicesList.push(parseInt(x[i].value));
                }
            }

            __listaNumbers.forEach(x => {
                var contact = new ContactVM();
                contact.id = 0;
                contact.phoneNumber = x.number;
                contact.typeNumber = x.type;
                contact.isActive = 1;
                contact.clientId = 0;
                contactsList.push(contact);
            });

            __listClients.forEach(x => {
                var client = new ClientVM();
                client.id = 0;
                client.name = x.name;
                if (checkIsMoral) {
                    client.lastName = "-";
                    client.secondLastName = "-";
                } else {
                    client.lastName = x.lastName;
                    client.secondLastName = x.secondLastName;
                }
                client.rfc = x.rfc;
                client.ine = x.ine;
                client.curp = x.curp;
                client.eMail = x.eMail;
                client.typeUser = x.typeClient;
                client.taxRegime = x.isMoral;
                client.isMale = x.IsMale;
                client.contacts = contactsList;
                client.isActive = true;
                client.agreementId = 0;
                clientsList.push(client);
            });

            __listaAddress.forEach(x => {
                var address = new AddressVM();
                address.Id = 0;
                address.Street = x.street;
                address.Outdoor = x.numExt;
                address.Indoor = x.numInt;
                address.Zip = x.zip;
                address.Reference = x.references;
                address.Lat = "0";
                address.Lon = "0";
                address.TypeAddress = x.typeAddress;
                address.SuburbsId = x.suburbId;
                address.IsActive = true;

                addressesList.push(address);
            });

            var agreement = new AgreementVM();
            agreement.id = GetValue("ID", true);
            agreement.account = GetValue("account", false);
            agreement.route = GetValue("route", false);
            agreement.derivatives = 0;
            agreement.typeServiceId = GetValue("typeService", true);
            agreement.typeUseId = GetValue("typeUse", true);
            agreement.typeConsumeId = GetValue("typeConsume", true);
            agreement.typeRegimeId = GetValue("typeRegime", true);
            agreement.typePeriodId = GetValue("typePeriod", true);
            agreement.typeCommertialBusinessId = GetValue("typeCommertialBusiness", true);
            agreement.typeStateServiceId = 1;
            agreement.typeIntakeId = GetValue("typeIntake", true);
            agreement.typeClasificationId = GetValue("typeClassification", true);
            agreement.diameterId = '@Plataform.IsAyuntamiento' == 'True' ? 1 : GetValue("diameter", true);
            agreement.typeAgreement = __TypeAgreement;
            agreement.agreementPrincipalId = 0;
            agreement.userId = __userId;
            agreement.observations = GetValue("observations", false) != "" ? GetValue("observations", false) : "N/A";
            agreement.servicesId = servicesList;
            agreement.adresses = addressesList;
            agreement.clients = clientsList;

            if ('@Plataform.IsAyuntamiento' == 'True' && document.getElementById("ID").value != 0) {
                var ADetail = new AgreementDetailVM();
                ADetail.folio = GetValue("folio", false);
                ADetail.register = GetValue("register", false);
                ADetail.taxableBase = parseFloat(document.getElementById("taxableBase").value);
                ADetail.ground = parseFloat(document.getElementById("taxableBase").value);
                ADetail.built = parseFloat(document.getElementById("build").value);
                ADetail.agreementDetailDate = new Date(document.getElementById("agreementDetailDate").value);
                ADetail.lastUpdate = new Date(document.getElementById("lastUpdate").value);
                ADetail.sector = 0;
                ADetail.observation = "";
                ADetail.manifest = document.getElementById("manifest").value == "true" ? true : false;
                ADetail.catastralKey = document.getElementById("catastralKey").value;
            } else {
                agreement.agreementDetails = [];
            }

            axios.post('/Agreement/CreateEdit', agreement).then(response => {
                UnBlock();
                console.log("Response: ", response.data);
                Swal.fire({
                    title: "Correcto",
                    text: response.data,
                    type: 'success',
                    showConfirmButton: true,
                });
            }).catch(error => {
                UnBlock();
                console.error("Error: ", error.response.data.error)
                Swal.fire({
                    title: "Disculpa",
                    text: error.response.data.error,
                    type: 'info',
                    showConfirmButton: true,
                });
            });
        }

        function ValidateSectionAgreement() {
            var ListServices = document.getElementById("services").selectedOptions,
                route = document.getElementById("route");
            if (ListServices.length == 0 || route.value == "") {
                var tabAgreement = document.getElementById("TabAgreement"),
                    tabContentAgreement = document.getElementById("agreementTab");

                var tabClient = document.getElementById("TabClient"),
                    tabContentClient = document.getElementById("clientTab");

                Swal.fire({
                    title: "Disculpa",
                    text: 'Debes seleccionar algun servicio y no olvides agregar la ruta',
                    type: 'info',
                    showConfirmButton: true,
                }).then(response => {
                    tabClient.classList.remove("active");
                    tabContentClient.classList.remove("active");

                    tabAgreement.classList.add("active");
                    tabContentAgreement.classList.add("active");
                });
            } else {
                startSectionClient();
            }
        }

        function ValidateSectionClients() {

            if (__listClients.length == 0) {
                var tabClient = document.getElementById("TabClient"),
                    tabContentClient = document.getElementById("clientTab");

                var tabAddress = document.getElementById("TabAddress"),
                    tabContentAddress = document.getElementById("addressTab");

                Swal.fire({
                    title: "Disculpa",
                    text: 'Debes agregar un cliente',
                    type: 'info',
                    showConfirmButton: true,
                }).then(response => {
                    tabClient.classList.add("active");
                    tabContentClient.classList.add("active");

                    tabAddress.classList.remove("active");
                    tabContentAddress.classList.remove("active");
                });
            } else {
                StartTabAddress();
            }
        }

    </script>
}
