@model object
@using GFD.Siscom.Enrollment.Utilities;
@using GFD.Siscom.Enrollment.Utilities.Auth;
@using Newtonsoft.Json;
@{
    var typeContrato = "Predio";
    if (!Plataform.IsAyuntamiento)
    {
        typeContrato = "Contrato";
    }

    dynamic data = JsonConvert.DeserializeObject<object>(JsonConvert.SerializeObject(Model));
    var idAgreement = data["id"];
    if (idAgreement > 0)
    {
        ViewData["Title"] = "Modificar";
    }
    else
    {
        ViewData["Title"] = "Generar";
    }
}
<style>
    .container-sweetAlert-DebtDetails {
        zoom: 1.0 !important;
    }
</style>
<div class="app-page-title">
    <div class="row">
        <div class="col-md-6">
            <div class="page-title-wrapper">
                <div class="page-title-heading">
                    <div class="page-title-icon">
                        <i class="fas fa-paste">
                        </i>
                    </div>
                    <h1 class="style-main-title">
                        @ViewData["Title"] @typeContrato
                    </h1>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="row">
                <div class="col-md-12">
                    <label id="accountMain" style="float: right; font-size: 27px;"></label>
                </div>
                <div class="col-md-12" style="margin-top: -11px;">
                    <label id="token" style="float: right; font-size: 20px;"></label>
                </div>
            </div>
        </div>

        <div class="col-md-12">
            @if (Plataform.IsAyuntamiento && idAgreement > 0 && Auth.Login.HasRole("Admin"))
            {
                <div style="margin-top: 7px;">
                    <button type="button" class="btn btn-GFD" onclick="GetFolio()" title="Descargar Constancia de No Adeudo"><i class="fas fa-file-download"></i> Constancia de no adeudo</button>
                </div>
            }
        </div>
    </div>
</div>
<br />
<div class="main-card mb-3 card">
    <div class="card-header">
        <ul class="nav nav-justified">
            <li class="nav-item"><a id="TabAgreement" data-toggle="tab" href="#agreementTab" class="active nav-link">Contrato</a></li>
            <li class="nav-item"><a id="TabClient" data-toggle="tab" href="#clientTab" class="nav-link" onclick="ValidateSectionAgreement('TabClient', 'clientTab')">Cliente</a></li>
            <li class="nav-item"><a id="TabAddress" data-toggle="tab" href="#addressTab" class="nav-link" onclick="ValidateSectionClients();">Dirección</a></li>
            @if (idAgreement != 0)
            {
                <li class="nav-item"><a id="TabRecord" data-toggle="tab" href="#recordTab" class="nav-link" onclick="ValidateSectionRecord('Pagos')">Historial</a></li>
            }
        </ul>
    </div>
    <div class="card-body">
        <div class="tab-content">
            <div class="tab-pane active" id="agreementTab" role="tabpanel">
                <partial name="~/Views/Agreements/_TabAgreement.cshtml" />
            </div>
            <div class="tab-pane" id="clientTab" role="tabpanel">
                <partial name="~/Views/Agreements/_TabClient.cshtml" />
            </div>
            <div class="tab-pane" id="addressTab" role="tabpanel">
                <partial name="~/Views/Agreements/_TabAddress.cshtml" />
            </div>
            <div class="tab-pane" id="recordTab" role="tabpanel">
                <partial name="~/Views/Agreements/_TabRecord.cshtml" />
            </div>
        </div>
        <div>
            <div class="row">
                <div class="col-md-12">
                    @if (idAgreement == 0)
                    {
                        <button type="submit" id="btnSaveData" class="btn btn-success float-right btn-save-gral-agrement" onclick="SaveData()" disabled>
                            <i class="fas fa-save"></i>
                            Guardar Contrato
                        </button>
                        <button type="button" id="btnAddDebt" style="display: none;" data-toggle="modal" data-target="#modalAddDebtAgreement"></button>
                    }

                    @*<button type="button" id="btnSimulation" style="display: none;" data-toggle="modal" data-target="#modalSimulation"></button>*@
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts{
    <partial name="~/Views/Partials/Modals/_ModalSearchTaxUser.cshtml" />
    <partial name="~/Views/Agreements/_ModalAddDebtAgreement.cshtml" />
    <partial name="~/Views/Agreements/_ModalSimulationCalPredial.cshtml" />
    <partial name="~/Views/Agreements/_ModalDebtsFromAgreement.cshtml" />
    <script>

        var isAyuntamiento = '@Plataform.IsAyuntamiento' == 'True' ? true : false,
            __date = new Date(),
            __IdAgreementPrincipal = 0,
            __checkIsDerivative = document.getElementById("isDerivative"),
            __AccountAyuntamiento = "",
            __YearBefore = false,
            __DataGeneral,
            form,
            __TypeAgreement = "",
            __userId = '@Auth.Login.User',
            __diameters = [],
            __services = [],
            __typeAddresses = [],
            __typeAgreemnets = [],
            __typeClassifications = [],
            __typeClients = [],
            __typeCommertialBusiness = [],
            __typeConsume = [],
            __typeContacts = [],
            __typeDebts = [],
            __typeDescounts = [],
            __typeFile = [],
            __typeIntake = [],
            __typePeriod = [],
            __typeRegime = [],
            __typeService = [],
            __typeStateService = [],
            __typeUse = [],
            __listAgreementDetail = [],
            __listClients = [],
            __listaNumbers = [],
            __listaAddress = [],
            idContacts = 1,
            idClients = 1,
            idAddresses = 1,
            __AgreementAccountFound = "",
            __AgreementIdFound = 0,
            __Agreement,
            __Client,
            __Addresses,
            __ListDebts;

        @*if ('@Plataform.IsAyuntamiento' == 'False')
        {
            
            __TypeAgreement = "AGR01";

        } else {
            __TypeAgreement = "CAT01";
        }*@

        window.onload = function () {
            Block();

            if (@idAgreement == 0) {
                if ('@Plataform.IsAyuntamiento' == 'True') {
                    getData("UR");
                } else {
                    getData("HA");
                }
            } else {
                __checkIsDerivative.disabled = true;
            }

            FormAgreement = document.getElementById("FormAgreement");
            FormAgreement.route.addEventListener("keypress", onlyNumbers, false);
            FormContacts = document.getElementById("FormContacts");
            FormContacts.phone.addEventListener("keypress", onlyNumbers, false);
            FormClient = document.getElementById("FormClient");
            FormClient.ine.addEventListener("keypress", onlyNumbers, false);
            FormAddress = document.getElementById("FormAddress");
            FormAddress.zip.addEventListener("keypress", onlyNumbers, false);

            if ('@Plataform.IsAyuntamiento' == 'True')
            {
                formAgreementDetail = document.getElementById("FormAgreementDetails");
                formAgreementDetail.folio.addEventListener("keypress", onlyNumbers, false);
                formAgreementDetail.taxableBase.addEventListener("keypress", onlyNumbers, false);
                formAgreementDetail.ground.addEventListener("keypress", onlyNumbers, false);
                formAgreementDetail.build.addEventListener("keypress", onlyNumbers, false);
                var dateCurrently = new Date();
                $("#agreementDetailDate").val(getFormateDate(dateCurrently, true));
            }

            $("#ID").val('@idAgreement');

            if (@idAgreement != 0) {
                setDataAgreement(@idAgreement);
            }
        }

        function setDataAgreement(id) {
            var servicesSelect = [];

            if ('@Plataform.IsAyuntamiento' == 'True') {
                document.getElementById("typeConsume").disabled = true;
            }
            document.getElementById("account").disabled = true;

            axios.get("/Agreement/GetSelected/" + id).then(response => {
                var data = response.data;
                console.log("Agreement: ", data);
                var AgreementDetails = data.agreementDetails,
                    AgreementServices = data.agreementServices,
                    Clients = data.clients,
                    Addresses = data.addresses;

                __Agreement = response.data;
                __Client = Clients;
                __Addresses = Addresses;

                //MANDAMOS LOS DATOS A LOS INPUTS DE AGREEMENT
                getData(data.typeIntake.acronym).then(response => {
                    if (isAyuntamiento) {
                        document.getElementById("isDerivative").checked = data.typeAgreement == "CAT01" ? false : true;
                    } else {
                        document.getElementById("isDerivative").checked = data.typeAgreement == "AGR01" ? false : true;
                    }
                    
                    document.getElementById("isDerivative").disabled = true;
                    $("#typeConsume").val(data.typeConsumeId);
                    $("#account").val(data.account);
                    $("#accountMain").html(`<b>Cuenta: </b>${data.account}`);
                    $("#token").html(`<b>Folio: </b>${data.token}`);
                    $("#typeIntake").val(data.typeIntakeId);
                    $("#typeRegime").val(data.typeRegimeId);
                    $("#typeUse").val(data.typeUseId);
                    $("#typeCommertialBusiness").val(data.typeCommertialBusinessId);
                    $("#typeClassification").val(data.typeClassificationId);
                    $("#typeService").val(data.typeServiceId);
                    $("#typePeriod").val(data.typePeriodId);
                    $("#typeStateService").val(data.typeStateServiceId);
                    $("#diameter").val(data.diameterId);
                    $("#route").val(data.route);
                    //AGREEMENT DETAILS
                    if (AgreementDetails.length > 0) {
                        AgreementDetails.forEach(x => {
                            var agreementDetailDate = getFormateDate(x.agreementDetailDate, true);
                            var lastUpdate = getFormateDate(x.lastUpdate, true);
                            $("#idAgreementDetail").val(x.id);
                            $("#folio").val(x.folio);
                            $("#register").val(x.register);
                            $("#taxableBase").val(x.taxableBase);
                            $("#ground").val(x.ground);
                            $("#build").val(x.built);
                            $("#agreementDetailDate").val(agreementDetailDate);
                            $("#lastUpdate").val(lastUpdate);
                            $("#manifest").val(x.manifest ? "true" : "false");
                            $("#catastralKey").val(x.catastralKey);
                        });
                    }

                    AgreementServices.forEach(x => {
                        servicesSelect.push(x.idService);
                    });
                    $("#services").val(servicesSelect);

                    Clients.forEach(x => {
                        var client = new ClientVM(x);
                        __listClients.push(client);
                        client.contacts.forEach(y => {
                            var contact = new ContactVM(y);
                            contact.clientId = y.clienteId;
                            __listaNumbers.push(contact);
                        });
                    });
                    fillTableClients("tbodyClients");
                    fillTableContact("tbodyContacts");

                    Addresses.forEach(x => {
                        var address = new AddressVM(x);
                        address.suburbName = x.suburbs.name;
                        address.townId = x.suburbs.towns.id;
                        address.townName = x.suburbs.towns.name;
                        address.stateId = x.suburbs.towns.states.id;
                        address.stateName = x.suburbs.towns.states.name;
                        address.agreementId = x.agreementsId;
                        __listaAddress.push(address);
                    });
                    fillTableAddress("tbodyAddresses");
                }).catch(error => {
                    console.log(error);
                });
            }).catch(error => { });
        }

        const getData = (acronym) => {
            return new Promise((resolve, reject) => {
                axios.get('/Agreement/GetData').then(response => {
                    var data = response.data;
                    //console.log("data: ", data);
                    __diameters = data.diameter;
                    __services = data.services;
                    __typeAddresses = data.typeAddresses;
                    __typeAgreemnets = data.typeAgreemnets;
                    __typeClassifications = data.typeClassifications;
                    __typeClients = data.typeClients;
                    __typeCommertialBusiness = data.typeCommertialBusiness;
                    __typeConsume = data.typeConsume;
                    __typeContacts = data.typeContacts;
                    __typeDebts = data.typeDebts;
                    __typeDescounts = data.typeDescounts;
                    __typeFile = data.typeFile;
                    __typeIntake = data.typeIntake;
                    __typePeriod = data.typePeriod;
                    __typeRegime = data.typeRegime;
                    __typeService = data.typeService;
                    __typeStateService = data.typeStateService;
                    __typeUse = data.typeUse;

                    RenderSelectOption(acronym, "typeConsume", __typeConsume, isAyuntamiento);
                    RenderSelectOption(acronym, "typeIntake", __typeIntake, isAyuntamiento);
                    RenderSelectOption(acronym, "typeRegime", __typeRegime, isAyuntamiento);
                    RenderSelectOption(acronym, "typeUse", __typeUse, isAyuntamiento);
                    RenderSelectOption(acronym, "typeCommertialBusiness", __typeCommertialBusiness, isAyuntamiento);
                    RenderSelectOption(acronym, "typeClassification", __typeClassifications, isAyuntamiento);
                    RenderSelectOption(acronym, "typeService", __typeService, isAyuntamiento);
                    if (!isAyuntamiento)
                    {
                        RenderSelectOption(acronym, "diameter", __diameters, isAyuntamiento);
                    }
                    if (@idAgreement != 0) {
                        RenderSelectOption(acronym, "typeStateService", __typeStateService, isAyuntamiento);
                    }
                    RenderSelectOption(acronym, "services", __services, isAyuntamiento);
                    RenderSelectOption(acronym, "typePeriod", __typePeriod, isAyuntamiento, UnBlock);

                    resolve(true);

                }).catch(error => {
                    reject(false);
                });
            });
        }

        async function SaveData() {
            Block();
            var _continue = true;
            //SI EL CHECK DE DERIVADIO ESTÁ EN TRUE, ES DERIVADO
            if (isAyuntamiento) {
                __TypeAgreement = __checkIsDerivative.checked == true ? "CAT02" : "CAT01"
            } else {
                __TypeAgreement = __checkIsDerivative.checked == true ? "AGR02" : "AGR01"
            }
            //VERIFICAMOS SI SE CAMBIA EL ESTADO DEL CONTRATO, SI ES INHABIL O CANCELADO
            if (@idAgreement > 0 && (GetValue("typeStateService", true) == 2 || GetValue("typeStateService", true) == 4)) {
                //SE VERIFICA SI TIENE DEUDA
                await SearchDebts(@idAgreement).then(response => {
                    //SI TIENE DEUDA ENTRA AL IF
                    if (response > 0) {
                        UnBlock();
                        Swal.fire({
                            title: "Disculpa",
                            text: "No puedes desactivar o cancelar esta cuenta, porque aun tiene adeudo",
                            type: 'info',
                            showConfirmButton: true,
                        });
                        _continue = false;
                    }
                });
            }

            if (_continue) {
                var servicesList = [],
                clientsList = [],
                contactsList = [],
                addressesList = [],
                servicesSelect = document.getElementById("services"),
                checkIsMoral = document.getElementById("isMoral").checked;

                if (checkIsMoral) {
                    $("#lastName").val("");
                    $("#secondLastName").val("");
                }

                //OBTENEMOS EL ID DE LOS SERVICIOS SELECCIONADOS
                var x = servicesSelect.selectedOptions;
                for (var i = 0; i < x.length; i++) {
                    servicesList.push(parseInt(x[i].value));
                }

                //GUARDAMOS LOS DATOS DEL ARREGLO DE CONTACTOS
                __listaNumbers.forEach(x => {
                    var contact = new ContactVM(x);
                    contactsList.push(contact);
                });

                __listClients.forEach(x => {
                    var client = new ClientVM(x);
                    client.contacts = contactsList;
                    clientsList.push(client);
                });

                __listaAddress.forEach(x => {
                    var address = new AddressVM(x);
                    addressesList.push(address);
                });

                var agreement = new AgreementVM({ });
                agreement.id = GetValue("ID", true);
                agreement.account = GetValue("account", false);
                agreement.route = GetValue("route", false);
                agreement.derivatives = 0;
                agreement.typeServiceId = GetValue("typeService", true);
                agreement.typeUseId = GetValue("typeUse", true);
                agreement.typeConsumeId = GetValue("typeConsume", true);
                agreement.typeRegimeId = GetValue("typeRegime", true);
                agreement.typePeriodId = GetValue("typePeriod", true);
                agreement.typeCommertialBusinessId = GetValue("typeCommertialBusiness", true);
                //ESTE CAMPO SOLO APARECE CUANDO MODIFICAMOS
                if (document.getElementById("typeStateService")) {
                    //SI ESTÁ ES PORQUE ESTAMOS MODIFICANDO Y ASIGNAMOS EL VALOR DEL INPUT
                    agreement.typeStateServiceId = GetValue("typeStateService", true);
                } else {
                    //SINO, POR DEFAULT MANDAMOS 1 COMO VALOR
                    agreement.typeStateServiceId = 1;
                }
                //SI EL CHECK DE DERIVADO ESTÁ EN TRUE, SI ES CONTRATO DERIVADO
                if (@idAgreement == 0 && __IdAgreementPrincipal > 0) {
                    agreement.agreementPrincipalId = __IdAgreementPrincipal;
                } else {
                    agreement.agreementPrincipalId = 0;
                }
                agreement.typeIntakeId = GetValue("typeIntake", true);
                agreement.typeClasificationId = GetValue("typeClassification", true);
                agreement.diameterId = '@Plataform.IsAyuntamiento' == 'True' ? 1 : GetValue("diameter", true);
                agreement.typeAgreement = __TypeAgreement;
                agreement.userId = __userId;
                agreement.observations = GetValue("observations", false) != "" ? GetValue("observations", false) : "N/A";
                agreement.servicesId = servicesList;
                agreement.adresses = addressesList;
                agreement.clients = clientsList;
                agreement.agreementDetails = [];

                //SI ES RUSTICO, AL NÚMERO DE CUENTA SE LE AGREGA UNA "R" AL FINAL
                if ('@Plataform.IsAyuntamiento' == 'True' && agreement.typeIntakeId == 2 && @idAgreement == 0) {
                    agreement.account = agreement.account + "R";
                }

                __AccountAyuntamiento = agreement.account;
                await axios.post('/Agreement/CreateEdit/' + agreement.id, agreement).then(response => {
                    UnBlock();
                    //CUANDO SE MODIFICAR AGREEMENT
                    if (@idAgreement != 0) {
                        __AgreementIdFound = @idAgreement;
                        Swal.fire({
                            title: "Bien",
                            text: response.data,
                            type: 'success',
                            showConfirmButton: true,
                        }).then(response => {
                            //SI ES AYUNTAMIENTO
                            if (isAyuntamiento) {
                                //AGREGAMOS LOS DETALLES DEL AGREEMENT
                                AddEditAgreementDetail(__AgreementIdFound).then(response => {
                                    //HACEMOS LA SIMULACIÓN DEL CÁLCULO DEL MONTO DE PREDIAL Y LIMPIA
                                    Simulation(__AccountAyuntamiento);
                                });
                            } else { //SI ES AGUA
                                var dateCurrently = new Date();
                                var year = dateCurrently.getFullYear();
                                var month = dateCurrently.getMonth() + 1;
                                const url = "/Debt/AddDebtToAgreement?AgreementId=";
                                //GENERAMOS NUEVO ADEUDO
                                axios.post(url + @idAgreement + "&month=" + month + "&year=" + year).then(response => {
                                    window.location.href = "/Agreement/EditCreateView?idAgreement=" + @idAgreement;
                                });
                            }
                        });
                    } else { //PARA CUANDO SE CREA AGREEMENT
                        Block();
                        axios.get('/FoundAgreement/' + response.data.id).then(response => {
                            UnBlock();
                            __AgreementIdFound = response.data.id;
                            __AgreementAccountFound = response.data.account;
                            Swal.fire({
                                title: "Bien",
                                text: response.data.success,
                                type: 'success',
                                showConfirmButton: true,
                            }).then(response => {
                                if (isAyuntamiento) {
                                    AddEditAgreementDetail(__AgreementIdFound).then(response => {
                                        Simulation(__AccountAyuntamiento);
                                    });
                                } else {
                                    $("#btnAddDebt").click();
                                }
                            });
                        }).catch(error => {
                            UnBlock();
                        });
                    }
                }).catch(error => {
                    UnBlock();
                    if (error.response.status == 409) {
                        Swal.fire({
                            title: "Disculpa",
                            text: error.response.request.response,
                            type: 'info',
                            showConfirmButton: true,
                        });
                    } else {
                        Swal.fire({
                            title: "Disculpa",
                            text: error.response.data.error,
                            type: 'info',
                            showConfirmButton: true,
                        });
                    }

                    console.error("Error: " + error.response.request.response);
                });
            }

        }

        function ValidateSectionAgreement(_tab, _childrenTab) {
            var ListServices = document.getElementById("services").selectedOptions,
                account = document.getElementById("account");

            var tabAgreement = document.getElementById("TabAgreement"),
                tabContentAgreement = document.getElementById("agreementTab");

            var tab = document.getElementById(_tab),
                childrenTab = document.getElementById(_childrenTab);

            var mesagge = "Debes seleccionar algún servicio";
            if ('@Plataform.IsAyuntamiento' == 'True') {
                mesagge = "Debes seleccionar algún impuesto";
            }

            let promise = new Promise((resolve, reject) => {
                if ('@Plataform.IsAyuntamiento' == 'True' && @idAgreement == 0) {
                    if (account.value == "") {
                        Swal.fire({
                            title: "Disculpa",
                            text: 'Debes agregar el número de cuenta',
                            type: 'info',
                            showConfirmButton: true,
                        }).then(response => {
                            tab.classList.remove("active");
                            childrenTab.classList.remove("active");
                            tabAgreement.classList.add("active");
                            tabContentAgreement.classList.add("active");
                        });
                    }
                }
                resolve(true);
            });

            promise.then(response => {
                if (ListServices.length == 0) {
                    Swal.fire({
                        title: "Disculpa",
                        text: mesagge,
                        type: 'info',
                        showConfirmButton: true,
                    }).then(response => {
                        tab.classList.remove("active");
                        childrenTab.classList.remove("active");
                        tabAgreement.classList.add("active");
                        tabContentAgreement.classList.add("active");
                    });
                }
            });

            startSectionClient();
        }

        function ValidateSectionClients() {
            if (__listClients.length == 0) {
                var tabClient = document.getElementById("TabClient"),
                    tabContentClient = document.getElementById("clientTab");

                var tabAddress = document.getElementById("TabAddress"),
                    tabContentAddress = document.getElementById("addressTab");

                Swal.fire({
                    title: "Disculpa",
                    text: 'Debes agregar un cliente',
                    type: 'info',
                    showConfirmButton: true,
                }).then(response => {
                    tabClient.classList.add("active");
                    tabContentClient.classList.add("active");

                    tabAddress.classList.remove("active");
                    tabContentAddress.classList.remove("active");
                });
            } else {
                StartTabAddress();
            }
        }

        function ValidateSectionRecord(tipo) {
            Block();
            debugger
            ClearDataTable("Table");
            axios.get("/Agreement/record?idAgreement=" + @idAgreement + "&tipo=" + tipo + "")
                .then(response => {

                    var data = response.data;
                    if (data.length > 0) {
                        if (tipo == "Pagos") {

                            var cuerpoTabla = "";
                            data.forEach(x => {
                                var PaymentDate = getFormateDate(x.paymentDate);
                                cuerpoTabla += `<tr>
                                <td>${PaymentDate}</td>
                                <td>${x.branchOffice}</td>
                                <td>${x.payMethod.name}</td>
                                <td>${FormatoPeso.format(x.total)}</td >
                                <td>${(x.status == 'EP001' ? "Cobrado" : "Cancelado")}</td>
                            </tr>`;
                            });

                            document.getElementById("tablaRecord").innerHTML = `<table style="width: 100%;" id="Table" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th width="15%">Fecha</th>
                                    <th width="15%">Sucursal</th>
                                    <th width="15%">Forma Pago</th>
                                    <th width="15%">Monto</th>
                                    <th width="15%">Estado</th>
                                </tr>
                            </thead>
                            <tbody id="tablaRecordBody">
                                ${cuerpoTabla}
                            </tbody>
                        </table>`;
                            UnBlock();
                        }
                        else if (tipo == "Recibos") {
                            var cuerpoTabla = "";
                            data.forEach(x => {
                                if (x.status == "ED001" || x.status == "ED004" || x.status == "ED005" || x.status == "ED007" || x.status == "ED011") {
                                    var FromDate = getFormateDate(x.fromDate);
                                    var UntilDate = getFormateDate(x.untilDate);
                                    var DebitDate = getFormateDate(x.debitDate);
                                    if (isAyuntamiento) {
                                        var type = getDescriptionType(x.type, TYPES_AYUNTAMIENTO);
                                    } else {
                                        var type = getDescriptionType(x.type, TYPES_AGUA);
                                    }

                                    cuerpoTabla += `<tr>
                                        <td>${FromDate} - ${UntilDate}</td>
                                        <td>${x.typeIntake}</td>
                                        <td>${x.typeService}</td>
                                        <td>${FormatoPeso.format(x.amount - x.onAccount)}</td>
                                        <td>${type}</td>
                                        <td>${DebitDate}</td>
                                        <td>${x.descriptionStatus}</td>
                                    </tr>`;
                                }
                            });

                            document.getElementById("tablaRecord").innerHTML = `<table style="width: 100%;" id="Table" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th width="20%">Periodo</th>
                                    <th width="10%">Tipo cuenta</th>
                                    <th width="10%">Servicio</th>
                                    <th width="10%">Monto</th>
                                    <th width="10%">Tipo</th>
                                    <th width="10%">Emisión</th>
                                    <th width="20%">Descrición del estado</th>
                                </tr>
                            </thead>
                            <tbody id="tablaRecordBody">
                                ${cuerpoTabla}
                            </tbody>
                        </table>`;
                            UnBlock();
                        }
                        else if (tipo == "Notificaciones") {
                            var cuerpoTabla = "";
                            data.forEach(x => {
                                var FromDate = getFormateDate(x.fromDate);
                                var UntilDate = getFormateDate(x.untilDate);
                                cuerpoTabla += `<tr>
                                <td>${x.folio}</td>
                                <td>${x.notificationDate}</td>
                                <td>${x.status}</td>
                                <td>${FromDate} - ${UntilDate}</td>
                                <td>${FormatoPeso.format(x.total)}</td>
                            </tr>`;
                            });

                            document.getElementById("tablaRecord").innerHTML = `<table style="width: 100%;" id="Table" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th width="10%">Folio</th>
                                    <th width="10%">Fecha Notifi</th>
                                    <th width="10%">Status</th>
                                    <th width="10%">Periodo</th>
                                    <th width="10%">Monto Notifi</th>
                                </tr>
                            </thead>
                            <tbody id="tablaRecordBody">
                                ${cuerpoTabla}
                            </tbody>
                        </table>`;
                            UnBlock();
                        }
                        else {      //Anticipos
                            var cuerpoTabla = "";
                            data.forEach(x => {
                                var prepaidDate = getFormateDate(x.prepaidDate);
                                cuerpoTabla += `<tr>
                                <td>${prepaidDate}</td>
                                <td>${FormatoPeso.format(x.amount)}</td>
                                <td>${x.accredited}</td>
                                <td>${x.status}</td>
                            </tr>`;
                            });

                            document.getElementById("tablaRecord").innerHTML = `<table style="width: 100%;" id="Table" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th width="10%">Fehca Anticipo</th>
                                    <th width="10%">Monto</th>
                                    <th width="10%">Saldo disponible</th>
                                    <th width="10%">Status</th>
                                </tr>
                            </thead>
                            <tbody id="tablaRecordBody">
                                ${cuerpoTabla}
                            </tbody>
                        </table>`;
                            UnBlock();
                        }
                    } else {
                        UnBlock();
                    }



                    if (!isAyuntamiento)
                    {

                    }

                    if (data.length > 10) {
                        loadDataTable("Table");
                    }
                })
                .catch(error => {
                    UnBlock();
                    console.log(error.response)
                    Swal.fire({
                        type: 'info',
                        title: 'Disculpa',
                        text: error.response.data.error,
                        showConfirmButton: true,
                    })
                });

        }

        //GENERAR LA DEUDA AL CREAR EL CONTRATO DE AGUA
        async function AddDebtAgua() {
            var selectYear = document.getElementById('year');
            var indexSelectedYear = selectYear.options.selectedIndex;
            var yearSelected = parseInt(selectYear.options[indexSelectedYear].textContent);

            if (yearSelected > __date.getFullYear()) {
                Swal.fire({
                    type: 'info',
                    title: 'Disculpa',
                    text: 'Aun no llega ese año',
                    showConfirmButton: true,
                });
                return false;
            }
            Block();
            let positionYearCurrently = 0;
            const url = "/Debt/AddDebtToAgreement?AgreementId=";
            var AgreementId = __AgreementIdFound
                accountNumber =__AgreementAccountFound
                year = GetValue("year", true); //7
                month = GetValue("month", true); //0

            YEAR.forEach(y => {
                if (__date.getFullYear() == y.year) {
                    positionYearCurrently = y.index;
                }
            })

            for (let i = year; i <= positionYearCurrently; i++) {
                if (i > year && i != positionYearCurrently) {
                    for (let j = 0; j < YEAR[i].months.length; j++) {
                        await GeneraDebtToAgua(url, AgreementId, YEAR[i].months[j].number, YEAR[i].year);
                        __YearBefore = true;
                    }
                } else if (i == positionYearCurrently) {
                    if (__YearBefore) {
                        for (let monthB = 0; monthB <= __date.getMonth(); monthB++) {
                            await GeneraDebtToAgua(url, AgreementId, YEAR[i].months[monthB].number, YEAR[i].year);
                        }
                    } else if (month < __date.getMonth()) {
                        for (let monthB = month; monthB <= __date.getMonth(); monthB++) {
                            await GeneraDebtToAgua(url, AgreementId, YEAR[i].months[monthB].number, YEAR[i].year);
                        }
                    } else {
                        for (var monthBC = 0; monthBC <= __date.getMonth(); monthBC++) {
                            await GeneraDebtToAgua(url, AgreementId, YEAR[i].months[monthBC].number, YEAR[i].year);
                        }
                    }
                } else {
                    for (let k = month; k < YEAR[i].months.length; k++) {
                        await GeneraDebtToAgua(url, AgreementId, YEAR[i].months[k].number, YEAR[i].year);
                    }
                }
            }
        }

        function GeneraDebtToAgua(url, AgreementId, month, year) {
            axios.post(url + AgreementId + "&month=" + month + "&year=" + year).then(response => {
                if (month == __date.getMonth() && year == __date.getFullYear()) {
                    UnBlock();
                    Swal.fire({
                        type: 'success',
                        title: 'Bien',
                        text: response.data,
                        showConfirmButton: true,
                    }).then(response => {
                        $("#modalAddDebtAgreement").modal('hide');
                    });
                }

            }).catch(error => {
                if (month == date.getMonth() && year == date.getFullYear()) {
                    UnBlock();
                    Swal.fire({
                        type: 'info',
                        title: 'Disculpa',
                        text: error.response.data.error,
                        showConfirmButton: true,
                    });
                }
                console.log(error.response);
            });
        }

        const SearchDebts = (agreementId) => {
            return new Promise((resolve, reject) => {
                axios.get("/Debt/DebtsAgreement/" + agreementId).then(response => {
                    resolve(response.data.length);
                }).catch(error => {
                    reject(error.response.data.error);
                });
            });
        }

        function Simulation(account) {
            Block();
            $("#tbodySimulation").html("");
            axios.post("/Agreement/RunAccountSimulation/" + account).then(response => {
                UnBlock();
                var data = response.data;
                console.log(data);
                if (data.length > 0) {
                    //$("#btnSimulation").click();
                    $("#modalSimulation").modal({ backdoor: true });
                    data.forEach(x => {
                        $("#SimulationAgreementId").val(x.id_agreement);
                        $("#SimulationCuenta").html(`<b>Cuenta: </b>${x.cuenta}`);
                        $("#SimulationValorCatastral").html(`<b>Valor Catastral: </b>${x.valor_Catastral}`);
                        $("#SimulationContruccion").html(`<b>Construcción: </b>${x.construccion}`);
                        $("#SimulationTerreno").html(`<b>Terreno: </b>${x.terreno}`);
                        var limpiaPrice = parseFloat(x.limpia_calculado);
                        var predialPrice = parseFloat(x.predial_calculado);
                        $("#SimulationLimpia").html(`<b>Limpia: </b>${isNaN(limpiaPrice) ? x.limpia_calculado : FormatoPeso.format(limpiaPrice)}`);
                        $("#SimulationPredial").html(`<b>Predial: </b>${isNaN(predialPrice) ? x.predial_calculado : FormatoPeso.format(x.predial_calculado)}`);
                        $("#SimulationFromula").html(x.formulA_APLICADA);
                        if (@idAgreement > 0) {
                            $("#btnModalSimulationGeneraDeuda").html("Actualizar Deuda");
                        }

                        if (isNaN(limpiaPrice) || isNaN(predialPrice)) {
                            document.getElementById("btnModalSimulationGeneraDeuda").style.display = "none";
                        } else {
                            document.getElementById("btnModalSimulationGeneraDeuda").style.display = "block";
                        }

                    });
                } else {
                    BeginDebtAyuntamiento(__AgreementIdFound);
                }
            }).catch(error => {
                UnBlock();

            });
        }

        function BeginDebtAyuntamiento(AgreementId) {
            var title = "Se agregará deuda";
            if (@idAgreement > 0) {
                title = "Se modificará la deuda"
            }
            Swal.fire({
                title: title,
                text: "¿Está deacuerdo con esto?",
                type: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Aceptar'
            }).then((result) => {
                if (result.value) {
                    GenerateDebtAyuntamiento(AgreementId, __AccountAyuntamiento)
                }
            })
        }

        function GenerateDebtAyuntamiento(AgreementId, account) {
            Block();
            axios.post("/Debt/AddDebtToAgreement?AgreementId=" + AgreementId).then(response => {
                UnBlock();
                var text = response.data + ' para la cuenta: ' + account;
                if (@idAgreement > 0) {
                    text = "Se actualizó la deuda";
                }
                Swal.fire({
                    type: 'success',
                    title: '¡Correcto!',
                    text: text,
                    showConfirmButton: true,
                }).then(response => {
                    if (@idAgreement == 0) {
                        window.location.href = "/Agreement/List";
                    } else {
                        $("#modalSimulation").modal('hide');
                    }
                });
            }).catch(error => {
                UnBlock();
                Swal.fire({
                    type: 'info',
                    title: '¡Discupe!',
                    text: error.response.data.error,
                    showConfirmButton: true,
                });
                console.error(error.response.request.response);
            });
        }

        //PARA OBTENER EL FOLIO DE LA CONSTANCIA DE NO ADEUDO
        function GetFolio() {
            Block();
            //REVISAMOS SI ESTE AGREEMENT TIENEN DEUDA
            axios.get("/Debt/DebtsAgreement/" + @idAgreement).then(response => {
                __ListDebts = response.data;
                //SI TIENE DEUDA MOSTRAMOS EL SIGUIENTE MENSAJE
                if (__ListDebts.length > 0) {
                    Swal.fire({
                        type: 'warning',
                        title: 'Disculpa',
                        text: 'Esta cuenta tiene deuda, no puede descargar Constancia de No Adeudo',
                        showConfirmButton: true,
                    }).then(response => {
                        //POSTERIORMENTE, ABRO UN MODAL CON LA TODA LA DEUDA PRESENTADA Y SUS DETALLES
                        $("#modalDebtAgreement").modal({ backdoor: true });
                        __ListDebts.forEach(x => {
                            var fromDate = getFormateDate(x.fromDate),
                                untilDate = getFormateDate(x.untilDate),
                                expirationDate = getFormateDate(x.expirationDate),
                                discount = "";
                            if (x.discount == "" || x.discount == null) {
                                discount = "N/A";
                            } else {
                                discount = x.discount;
                            }
                            var status = getDescriptionType(x.status, STATUS);
                            $("#tbodyDebtsFromAgreement").append(`
                                <tr>
                                    <td>${fromDate}-${untilDate}</td>
                                    <td>${x.descriptionType}</td>
                                    <td>${discount}</td>
                                    <td>${FormatoPeso.format(x.amount)}</td>
                                    <td>${FormatoPeso.format(x.onAccount)}</td>
                                    <td>${status}</td>
                                    <td>${expirationDate}</td>
                                    <td>
                                        <a class="nav-link btn-flush" onclick="GetDebtDetails(${x.id})" data-caret="false" style="margin: 0 auto;">
                                            <i class="fas fa-eye iconX" title="Detalles de la Deuda"></i>
                                        </a>
                                    </td>
                                </tr>
                            `);
                        });
                    });
                    UnBlock();
                } else { //SI NO TIENE DEUD, CONTINUARÁ CON EL PROCESO, AGREGARÁ A LA TABLA PROOFNODEBT UN REGISTRO PARA LA CONSTANCIA QUE SERÁ DESCARGADA
                    UnBlock();
                    Swal.fire({
                        type: 'success',
                        title: 'Bien',
                        text: 'Cuenta sin deuda, se descargará la Constancia de no Adeudo',
                        showConfirmButton: true,
                    }).then(response => {
                        Block();
                        var proof = new ProofNoDebtVM({});
                        proof.userId = '@Auth.Login.User';
                        proof.agreementId = @idAgreement;

                        axios.post("/GenerateFolioProofNoDebt", proof).then(response => {
                            UnBlock();
                            var id_proof = response.data.id;
                            axios.get("/GetProof/" + id_proof).then(response => {
                                var objectProof = new ProofNoDebtVM(response.data);
                                DownloadProofNoDebt(objectProof.folio);
                            })
                        }).catch(error => {
                            UnBlock();
                        });
                    });
                }
            }).catch(error => {
                UnBlock();
            });
        }

        //DETALLES DE LA DEUDA EN EL MODAL CUANDO SE REQUIERA UNA CONSTANCIA DE NO ADEUDO
        function GetDebtDetails(idDebt) {
            Swal.fire({
                customClass: {
                    container: 'container-sweetAlert-DebtDetails',
                },
                title: '<p style="font-size: 19px; font-weight: 400;">DETALLES</p>',
                html:
                    `<div class="row">
                    <div class="col-md-12">
                        <table style="width: 100%;" id="TableDebtsDetails" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th style="font-size:15px;" width="20%">Código</th>
                                    <th style="font-size:15px;" width="60%">Concepto</th>
                                    <th style="font-size:15px;" width="20%">Monto</th>
                                </tr>
                            </thead>
                            <tbody id="tbodyDebtsDetails"></tbody>
                        </table>
                    </div>
                </div>`,
                showConfirmButton: true,
            })
            $("#tbodyDebtsDetails").html("");
            var listDebts = __ListDebts.find(x => x.id == idDebt);

            if (listDebts.debtDetails.length > 0) {
                listDebts.debtDetails.forEach(x => {
                    $("#tbodyDebtsDetails").append(`
                        <tr>
                            <td style="font-size:14px !important; font-weight: 400;">${x.codeConcept}</td>
                            <td style="font-size:14px !important; font-weight: 400;">${x.nameConcept}</td>
                            <td style="font-size:14px !important; font-weight: 400;">${FormatoPeso.format(x.amount)}</td>
                        </tr>
                    `);
                });
            } else {
                $("#tbodyDebtsDetails").append(`
                    <tr>
                        <td colspan="3" style="text-align: center; font-size: 23px;">Sin Datos</td>
                    </tr>
                `);
            }
        }

        //PARA DESCARGAR LA CONSTANCIAS DE NO ADEUDO
        function DownloadProofNoDebt(folio) {
            Block();
            var agreement = new AgreementVM(__Agreement);
            var client = new ClientVM(__Client[0]);
            var address;
            __Addresses.forEach(x => {
                if (x.typeAddress == "DIR01") {
                    address = new AddressVM(x);
                }
            });
            agreement.clients = [client];
            agreement.adresses = [address];
            var data = {
                folio: folio,
                agreement
            }
            axios.post("/Agreement/GeneraProofNoDebt", data).then(response => {
                DownloadPDF(response.data);
                UnBlock();
            });
        }
    </script>
}
