@model AgreementVM
@using GFD.Siscom.Enrollment.Utilities;
@using GFD.Siscom.Enrollment.Utilities.Auth;
@{
    ViewData["Title"] = "Generar Contrato";
}

<div class="app-page-title">
    <div class="page-title-wrapper">
        <div class="page-title-heading">
            <div class="page-title-icon">
                <i class="pe-7s-medal icon-gradient bg-tempting-azure">
                </i>
            </div>
            <div>
                @ViewData["Title"]
            </div>
        </div>
    </div>
</div>
<br />
<div class="main-card mb-3 card">
    <div class="card-header">
        <ul class="nav nav-justified">
            <li class="nav-item"><a data-toggle="tab" href="#agreementTab" class="active nav-link">Contrato</a></li>
            <li class="nav-item"><a data-toggle="tab" href="#clientTab" class="nav-link" onclick="startSectionClient()">Cliente</a></li>
            <li class="nav-item"><a data-toggle="tab" href="#addressTab" class="nav-link">Dirección</a></li>
        </ul>
    </div>
    <div class="card-body">
        <form id="FormData" onsubmit="SaveData(event)">
            <div class="tab-content">
                <div class="tab-pane active" id="agreementTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabAgreement.cshtml" />
                </div>
                <div class="tab-pane" id="clientTab" role="tabpanel">
                    <partial name="~/Views/Agreements/_TabClient.cshtml" />
                </div>
                <div class="tab-pane" id="addressTab" role="tabpanel">
                    <p>
                        Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a
                        type specimen book. It has
                        survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged.
                    </p>
                </div>
            </div>
            <div class="d-block text-center card-footer">
                <div class="row">
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-GFD float-right">Guardar</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>



@section Scripts{

    <script>
        var __TypeAgreement = "",
            __userId = '@Auth.Login.User',
            __diameters = [],
            __services = [],
            __typeAddresses = [],
            __typeAgreemnets = [],
            __typeClassifications = [],
            __typeClients = [],
            __typeCommertialBusiness = [],
            __typeConsume = [],
            __typeContacts = [],
            __typeDebts = [],
            __typeDescounts = [],
            __typeFile = [],
            __typeIntake = [],
            __typePeriod = [],
            __typeRegime = [],
            __typeService = [],
            __typeStateService = [],
            __typeUse = [],
            __listaNumbers = [];

        if ('@Plataform.IsAyuntamiento' == 'False')
        {
            __TypeAgreement = "AGR01";
        } else {
            __TypeAgreement = "CAT01"
        }

        window.onload = function () {
            Block();
            getData();

            var form = document.getElementById("FormData");
            form.phone.addEventListener("keypress", onlyNumbers, false);
            form.ine.addEventListener("keypress", onlyNumbers, false);
        }

        function getData() {
            axios.get('/Agreement/GetData').then(response => {
                var data = response.data;
                console.log("data: ", data);
                __diameters = data.diameter;
                __services = data.services;
                __typeAddresses = data.typeAddresses;
                __typeAgreemnets = data.typeAgreemnets;
                __typeClassifications = data.typeClassifications;
                __typeClients = data.typeClients;
                __typeCommertialBusiness = data.typeCommertialBusiness;
                __typeConsume = data.typeConsume;
                __typeContacts = data.typeContacts;
                __typeDebts = data.typeDebts;
                __typeDescounts = data.typeDescounts;
                __typeFile = data.typeFile;
                __typeIntake = data.typeIntake;
                __typePeriod = data.typePeriod;
                __typeRegime = data.typeRegime;
                __typeService = data.typeService;
                __typeStateService = data.typeStateService;
                __typeUse = data.typeUse;

                RenderSelectOption("typeIntake", __typeIntake, '@Model?.TypeIntakeId');
                RenderSelectOption("typeRegime", __typeRegime, '@Model?.TypeRegimeId');
                RenderSelectOption("typeUse", __typeUse, '@Model?.TypeUseId');
                RenderSelectOption("typeCommertialBusiness", __typeCommertialBusiness, '@Model?.TypeCommertialBusinessId');
                RenderSelectOption("typeClassification", __typeClassifications, '@Model?.TypeClasificationId');
                RenderSelectOption("typeService", __typeService, '@Model?.TypeServiceId');
                if ('@Plataform.IsAyuntamiento' == 'False')
                {
                    RenderSelectOption("diameter", __diameters, '@Model?.DiameterId');
                    RenderSelectOption("typeConsume", __typeConsume, '@Model?.TypeConsumeId');
                }
                RenderSelectOption("services", __services, '@Model?.ServicesId?.ToList()');
                RenderSelectOption("typePeriod", __typePeriod, '@Model?.TypePeriodId', UnBlock);

            }).catch(error => { });
        }

        function SaveData(event) {
            //Block();
            event.preventDefault();

            var servicesList = [],
                servicesSelect = document.getElementById("services");

            var x = servicesSelect.selectedOptions;
            for (var i = 0; i < x.length; i++) {
                servicesList.push(parseInt(x[i].value));
            }

            var agreement = new AgreementVM();
            agreement.Id = GetValue("ID", true);
            agreement.Account = GetValue("account", false);
            agreement.Route = GetValue("route", false);
            agreement.Derivatives = 0;
            agreement.TypeServiceId = GetValue("typeService", true);
            agreement.TypeUseId = GetValue("typeUse", true);
            agreement.TypeConsumeId = GetValue("typeConsume", true);
            agreement.TypeRegimeId = GetValue("typeRegime", true);
            agreement.TypePeriodId = GetValue("typePeriod", true);
            agreement.TypeCommertialBusinessId = GetValue("typeCommertialBusiness", true);
            agreement.TypeStateServiceId = GetValue("typeStateService", true);
            agreement.TypeIntakeId = GetValue("typeIntake", true);
            agreement.TypeClasificationId = GetValue("typeClassification", true);
            agreement.DiameterId = GetValue("diameter", true);
            agreement.TypeAgreement = __TypeAgreement;
            agreement.AgreementPrincipalId = 0;
            agreement.UserId = __userId;
            agreement.Observations = GetValue("observations", false) != "" ? GetValue("observations", false) : "N/A";
            agreement.ServicesId = servicesList;
            agreement.Adresses = [];
            agreement.Clients = [];
            agreement.AgreementDetails = [];

            axios.post('/Agreement/CreateEdit', agreement).then(response => {
                //console.log("Response: ", response.data);
            }).catch(error => { });
        }

    </script>
}
