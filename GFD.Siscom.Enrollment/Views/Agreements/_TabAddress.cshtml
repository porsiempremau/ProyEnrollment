@using GFD.Siscom.Enrollment.Utilities;
@using GFD.Siscom.Enrollment.Utilities.Auth;
@using Newtonsoft.Json;
@{
    dynamic mo = JsonConvert.DeserializeObject<object>(JsonConvert.SerializeObject(Model));
    var IDAgree = mo["id"];
}
<style>
    #MapAgreement {
        height: 307px;
    }
</style>
<div class="row">
    <div class="col-md-4">
        <div class="main-card mb-3 card">
            <div class="title-head">
                <p>Localización</p>
            </div>
            <div class="card-body">
                <form id="FormAddress" onsubmit="AddAddressToTable(event)">
                    <div class="row">

                        <div class="col-md-12">
                            <label>Estado:</label>
                            <input type="hidden" id="idAddress" name="idAddress" />
                            <select class="form-control form-control-sm" id="stateId" name="stateId" onchange="SearchTownByIdState(this.value, 'townId')"></select>
                        </div>

                        <div class="col-md-12">
                            <label>Municipio:</label>
                            <select class="form-control form-control-sm" id="townId" name="townId" onchange="SearchSuburbByIdTown(this.value, 'suburbId');"></select>
                        </div>

                        <div class="col-md-12">
                            <label>Colonia:</label>
                            <select class="form-control form-control-sm" id="suburbId" name="suburbId"></select>
                        </div>

                        <div class="col-md-12">
                            <label>Calle:</label>
                            <input type="text" class="form-control form-control-sm" id="street" name="street" maxlength="150" required />
                        </div>

                        <div class="col-md-6">
                            <label>Número Ext:</label>
                            <input type="text" class="form-control form-control-sm" id="numExt" name="numExt" maxlength="50" required/>
                        </div>
                        <div class="col-md-6">
                            <label>Número Int:</label>
                            <input type="text" class="form-control form-control-sm" id="numInt" name="numInt" maxlength="50" />
                        </div>

                        <div class="col-md-12">
                            <label>Código Postal:</label>
                            <input type="text" class="form-control form-control-sm" id="zip" name="zip" maxlength="5" required />
                        </div>

                        <div class="col-md-12">
                            <label>Referencias:</label>
                            <input type="text" class="form-control form-control-sm" id="references" name="references" maxlength="20" />
                        </div>

                        <div class="col-md-12">
                            <label>Tipo de Dirección:</label>
                            <select class="form-control form-control-sm" id="typeAddress" name="typeAddress"></select>
                        </div>

                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-8">
        <div class="main-card mb-3 card">
            <div class="title-head">
                <p>Dirección</p>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <table id="TableAddresses" style="width: 100%;" class="table table-hover table-striped table-bordered">
                            <thead class="style-theads">
                                <tr>
                                    <th>Calle</th>
                                    <th>Colonia</th>
                                    <th>Municipio</th>
                                    <th>Estado</th>
                                    <th>Tipo</th>
                                    <th></th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="tbodyAddresses"></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>


        <div class="main-card mb-3 card">
            <div class="title-head">
                <p>Mapa</p>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-12">
                        <div id="ContentMap"></div>
                    </div>
                    <div class="col-md-4">
                        <label>Latitud:</label>
                        <input class="form-control form-control-sm" id="lat" name="lat" readonly />
                    </div>
                    <div class="col-md-4">
                        <label>Longitud:</label>
                        <input class="form-control form-control-sm" id="lon" name="lon" readonly />
                    </div>
                    <div class="col-md-4">
                        <button type="submit" id="btnAddAddress" class="btn btn-GFD margin-top-btns" form="FormAddress">
                            <i class="fas fa-plus-circle"></i>
                            Agregar Dirección
                        </button>
                        <button type="button" id="btnEditAddress" class="btn btn-success margin-top-btns" onclick="EditAddress(document.getElementById('idAddress').value)" style="display: none">
                            <i class="fas fa-edit"></i>
                            Editar Dirección
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@if (IDAgree != 0 && Auth.Login.HasRoles("Admin|Supervisor|Super|Isabi"))
{
    <div class="row">
        <div class="col-md-12">
            <button type="button" id="btnUpdateAddress" class="btn btn-success float-right btn-save-gral-agrement" onclick="UpdateAddresses()">
                <i class="fas fa-map-marked-alt"></i>
                Salvar Cambios
            </button>
        </div>
    </div>
}

<script>
    var __lat = "",
        __lon = "";

    function StartTabAddress() {
        GetCountries("stateId");
        SearchTownByIdState(21, "townId");
        SearchSuburbByIdTown(2, "suburbId");
        RenderSelectOption("", "typeAddress", __typeAddresses);
        setTimeout(() => {
            var addressFound = __listaAddress.find(x => x.typeAddress == "DIR01");
            if ((@IDAgree != 0 && ((addressFound.lat == "0" || addressFound.lat == "") && (addressFound.lon == "0" || addressFound.lon == "")))
                || addressFound == undefined
                || addressFound.lat == ""
                || addressFound.lon == "") {
                loadMap(19.0894637, -98.2733105);
            } else {
                loadMap(parseFloat(addressFound.lat), parseFloat(addressFound.lon));
            }
        }, 1000)
    }

    function AddAddressToTable(event) {
        event.preventDefault();
        var stateId = GetValue("stateId", true),
            townId = GetValue("townId", true),
            suburbsId = GetValue("suburbId", true),
            street = GetValue("street", false),
            outdoor = GetValue("numExt", false),
            indoor = GetValue("numInt", false),
            zip = GetValue("zip", false),
            reference = GetValue("references", false),
            typeAddress = GetValue("typeAddress", false),
            founded = null;

        var stateName = document.getElementById("stateId").selectedOptions[0].innerText,
            townName = document.getElementById("townId").selectedOptions[0].innerText,
            suburbName = document.getElementById("suburbId").selectedOptions[0].innerText;

        founded = __listaAddress.find(x => x.typeAddress == typeAddress);
        if ((founded != null || founded != undefined) && founded.isActive) {
            Swal.fire({
                title: "Disculpa",
                text: 'Ya hay una dirección de tipo ' + getDescriptionType(typeAddress, __typeAddresses),
                icon: 'info',
                showConfirmButton: true,
            });
        } else {
            if (@IDAgree != 0) {
                idAddresses = 0;
            } else {
                idAddresses++;
            }
            __listaAddress.push({
                id: idAddresses,
                stateId,
                stateName,
                townId,
                townName,
                suburbsId,
                suburbName,
                street,
                outdoor,
                indoor,
                zip,
                reference,
                typeAddress,
                isActive: true,
                lat: __lat,
                lon: __lon
            });
            fillTableAddress("tbodyAddresses");
        }
    }

    function fillTableAddress(idTBody) {
        var btnSaveData = document.getElementById("btnSaveData");
        $("#" + idTBody).html("");
        CleanFieldAddress();
        let i = 0;
        if (__listaAddress.length > 0) {
            __listaAddress.forEach(x => {
                if (x.isActive) {
                    var nameTypeAddress = getDescriptionType(x.typeAddress, __typeAddresses);
                    $("#" + idTBody).append(`
                        <tr>
                            <td>${x.street}</td>
                            <td>${x.suburbName}</td>
                            <td>${x.townName}</td>
                            <td>${x.stateName}</td>
                            <td>${nameTypeAddress}</td>
                            <td>
                                <a class="nav-link btn-flush" onclick="setDataAddress(${x.id}, ${i})" type="button"
                                   data-caret="false" style="margin: 0 auto;">
                                    <i class="fas fa-edit iconX" title="Editar Cliente"></i>
                                </a>
                            </td>
                            <td>
                                <a id="IconDeleteAddress${i}" class="nav-link btn-flush ${x.typeAddress == 'DIR01' ? 'disabled' : ''}"  onclick="deleteItemAddress(${x.id})" type="button"
                                   data-caret="false" style="margin: 0 auto;">
                                    <i class="fas fa-trash iconX" title="Eliminar Dirección"></i>
                                </a>
                            </td>
                        </tr>
                    `);
                    i++;
                }
            });
            if (btnSaveData != null) {
                btnSaveData.disabled = false
            }
        } else {
            if (btnSaveData != null) {
                btnSaveData.disabled = true
            }
        }

    }

    function CleanFieldAddress() {
        $("#street").val("");
        $("#numExt").val("");
        $("#numInt").val("");
        $("#zip").val("");
        $("#references").val("");
        $("#lat").val("");
        $("#lon").val("");
        document.getElementById("btnAddAddress").style.display = "block";
        document.getElementById("btnEditAddress").style.display = "none";
    }

    function deleteItemAddress(id) {
        Swal.fire({
            title: 'Se eliminará la dirección',
            text: "¿Está deacuerdo con esto?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Aceptar'
        }).then(response => {
            if (response.value) {
                var item = __listaAddress.find(x => x.id == id);
                var index = __listaAddress.indexOf(item);
                __listaAddress.splice(index, 1, {
                    id: item.id,
                    street: item.street,
                    outdoor: item.outdoor,
                    indoor: item.indoor,
                    zip: item.zip,
                    reference: item.reference,
                    lat: item.lat,
                    lon: item.lon,
                    typeAddress: item.typeAddress,
                    suburbsId: item.suburbsId,
                    isActive: false,
                    agreementId: item.agreementId,
                    lat: item.lat,
                    lon: item.lon
                });
                fillTableAddress("tbodyAddresses");
            }
        });
    }

    function setDataAddress(id, index) {
        var item = __listaAddress.find(x => x.id == id);
        var lat, lng;
        document.getElementById("btnAddAddress").style.display = "none";
        document.getElementById("btnEditAddress").style.display = "block";
        //DESACTIVAMOS LOS TABS PARA QUE EL USUARIO NO PUEDA NAVEGAR HASTA QUE GUARDE LOS CAMBIOS EN EL ARREGLO DE DIRECCIÓN
        document.getElementById("TabAgreement").classList.add("disabled");
        document.getElementById("TabAgreement").classList.add("disabled-tabs");
        document.getElementById("TabClient").classList.add("disabled");
        document.getElementById("TabClient").classList.add("disabled-tabs");
        if (@IDAgree > 0) {
            document.getElementById("btnUpdateAddress").disabled = true;
            //DESACTIVAMOS LOS TAB DE HISTORIAL PARA QUE EL USUARIO NO PUEDA NAVEGAR HASTA QUE GUARDE LOS CAMBIOS EN EL ARREGLO DE CLIENTES
            document.getElementById("TabRecord").classList.add("disabled");
            document.getElementById("TabRecord").classList.add("disabled-tabs");
        }
        if (@IDAgree == 0) {
            document.getElementById("btnSaveData").disabled = true;
        }
        for (var i = 0; i < __listaAddress.length; i++) {
            if (__listaAddress[i].isActive) {
                document.getElementById("IconDeleteAddress" + i).classList.add("disabled");
            }
        }

        SearchSuburbByIdTown(item.townId, "suburbId").then(response => {
            $("#idAddress").val(item.id);
            $("#stateId").val(item.stateId);
            $("#townId").val(item.townId);
            $("#suburbId").val(item.suburbsId);
            $("#street").val(item.street);
            $("#numExt").val(item.outdoor);
            $("#numInt").val(item.indoor);
            $("#zip").val(item.zip);
            $("#references").val(item.reference);
            $("#typeAddress").val(item.typeAddress);
            $("#lat").val(item.lat);
            $("#lon").val(item.lon);
            if (item.lat == "0" || item.lat == "" || item.lat == null) {
                lat = "19.0894637";
            } else {
                lat = item.lat;
            }
            if (item.lon == "0" || item.lon == "" || item.lon == null) {
                lng = "-98.2733105";
            } else {
                lng = item.lon;
            }
            loadMap(parseFloat(lat), parseFloat(lng));
        });
    }

    function EditAddress(id) {
        var itemFound = __listaAddress.find(x => x.id == id);
        var index = __listaAddress.indexOf(itemFound);

        var id = GetValue("idAddress", true),
            stateId = GetValue("stateId", true),
            stateName = document.getElementById("stateId").innerText;
            townId = GetValue("townId", true),
            suburbsId = GetValue("suburbId", true),
            street = GetValue("street", false),
            outdoor = GetValue("numExt", false),
            indoor = GetValue("numInt", false),
            zip = GetValue("zip", false),
            reference = GetValue("references", false),
            typeAddress = GetValue("typeAddress", false);

        var stateName = document.getElementById("stateId").selectedOptions[0].innerText,
            townName = document.getElementById("townId").selectedOptions[0].innerText,
            suburbName = document.getElementById("suburbId").selectedOptions[0].innerText;

        var lat = document.getElementById("lat").value,
            lon = document.getElementById("lon").value;

        __listaAddress.splice(index, 1, {
            id,
            stateId,
            stateName,
            townId,
            townName,
            suburbsId,
            suburbName,
            street,
            outdoor,
            indoor,
            zip,
            reference,
            typeAddress,
            isActive: true,
            lat,
            lon
        });
        document.getElementById("btnAddAddress").style.display = "block";
        document.getElementById("btnEditAddress").style.display = "none";
        //PARA HABILITAR LOS TABS DESPUES DE QUE SE EDITARON LOS DATOS
        document.getElementById("TabAgreement").classList.remove("disabled");
        document.getElementById("TabAgreement").classList.remove("disabled-tabs");
        document.getElementById("TabClient").classList.remove("disabled");
        document.getElementById("TabClient").classList.remove("disabled-tabs");
        if (@IDAgree > 0) {
            document.getElementById("btnUpdateAddress").disabled = false;
            //HABILITAMOD EL TAB DE HISTORIAL
            document.getElementById("TabRecord").classList.remove("disabled");
            document.getElementById("TabRecord").classList.remove("disabled-tabs");
        }
        if (@IDAgree == 0) {
            document.getElementById("btnSaveData").disabled = false;
        }
        for (var i = 0; i < __listaAddress.length; i++) {
            document.getElementById("IconDeleteAddress" + i).classList.remove("disabled");
        }
        fillTableAddress("tbodyAddresses");
    }

    function UpdateAddresses() {
        Block();
        var addresses = [];

        __listaAddress.forEach(x => {
            var address = new AddressVM(x);
            addresses.push(address);
        });

        axios.put(`/Agreement/CreateEditAddress/${@IDAgree}`, { addresses }).then(response => {
            UnBlock();
            Swal.fire({
                title: "Bien",
                text: response.data,
                icon: 'success',
                showConfirmButton: true,
            });
                //.then(response => {
                //window.location.href = "/Agreement/EditCreateView?idAgreement=" + @IDAgree;
            //});
        }).catch(error => {
            UnBlock();
            Swal.fire({
                title: "Disculpa",
                text: error.response.data,
                icon: 'info',
                showConfirmButton: true,
            });
        });
    }

    function loadMap(lat, lng) {

        $("#ContentMap").html(`<div id="MapAgreement"></div>`);
        var map = L.map('MapAgreement').setView([lat, lng], 18);
        //map.eachLayer((layer) => {
        //    layer.remove();
        //});
        var layer = new L.tileLayer('http://{s}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
            maxZoom: 18,
            subdomains: ['mt0', 'mt1', 'mt2', 'mt3']
        });
        map.addLayer(layer);

        marker = L.marker([lat, lng], {
            draggable: true
        }).addTo(map).on('drag', getCoordinates);

        map.on('click', getCoordinates);
    }

    function getCoordinates(e) {
        var latlng = e.latlng;
        __lat = latlng.lat.toString();
        __lon = latlng.lng.toString();
        $("#lat").val(__lat);
        $("#lon").val(__lon);
    }

</script>
